
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000422  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000954  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000b4  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fe  00000000  00000000  00000f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c4  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c3  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000265  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000676  00000000  00000000  00002299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000290f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__c.1804>:
  68:	4c 69 6e 65 20 32 20 6c 6f 6e 67 65 72 20 74 68     Line 2 longer th
  78:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
	...

00000089 <__c.1802>:
  89:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  99:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  a9:	0a 00                                               ..

000000ab <copyRightChar>:
  ab:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................
	...

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d4 e0       	ldi	r29, 0x04	; 4
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e2 e2       	ldi	r30, 0x22	; 34
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>
  de:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  e2:	0c 94 0f 02 	jmp	0x41e	; 0x41e <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <wait_until_key_pressed>:
{
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PIND;                  // read input
  ea:	89 b1       	in	r24, 0x09	; 9
        for(i=0;i<65535;i++);
        temp2 = PIND;                  // read input
  ec:	99 b1       	in	r25, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
  ee:	89 23       	and	r24, r25
    } while ( temp1 & _BV(PIND2) );
  f0:	82 fd       	sbrc	r24, 2
  f2:	fb cf       	rjmp	.-10     	; 0xea <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
  f4:	4a 9b       	sbis	0x09, 2	; 9
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <wait_until_key_pressed+0xa>
}
  f8:	08 95       	ret

000000fa <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  fa:	46 9a       	sbi	0x08, 6	; 8
    lcd_e_delay();
  fc:	00 c0       	rjmp	.+0      	; 0xfe <toggle_e+0x4>
    lcd_e_low();
  fe:	46 98       	cbi	0x08, 6	; 8
 100:	08 95       	ret

00000102 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 10e:	66 23       	and	r22, r22
 110:	11 f0       	breq	.+4      	; 0x116 <lcd_write+0x14>
       lcd_rs_high();
 112:	44 9a       	sbi	0x08, 4	; 8
 114:	01 c0       	rjmp	.+2      	; 0x118 <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 116:	44 98       	cbi	0x08, 4	; 8
    }
    lcd_rw_low();
 118:	45 98       	cbi	0x08, 5	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 11a:	97 b1       	in	r25, 0x07	; 7
 11c:	9f 60       	ori	r25, 0x0F	; 15
 11e:	97 b9       	out	0x07, r25	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 120:	18 b1       	in	r17, 0x08	; 8
 122:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 124:	98 2f       	mov	r25, r24
 126:	92 95       	swap	r25
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	91 2b       	or	r25, r17
 12c:	98 b9       	out	0x08, r25	; 8
        lcd_e_toggle();
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	81 2b       	or	r24, r17
 13a:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 13c:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 140:	1f 60       	ori	r17, 0x0F	; 15
 142:	18 b9       	out	0x08, r17	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 14e:	44 98       	cbi	0x08, 4	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 150:	45 9a       	sbi	0x08, 5	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 152:	87 b1       	in	r24, 0x07	; 7
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 158:	46 9a       	sbi	0x08, 6	; 8
        lcd_e_delay();        
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_read.constprop.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 15c:	86 b1       	in	r24, 0x06	; 6
        lcd_e_low();
 15e:	46 98       	cbi	0x08, 6	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_read.constprop.0+0x14>
        
        lcd_e_high();
 162:	46 9a       	sbi	0x08, 6	; 8
        lcd_e_delay();
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_read.constprop.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 166:	96 b1       	in	r25, 0x06	; 6
 168:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 16a:	82 95       	swap	r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
 16e:	46 98       	cbi	0x08, 6	; 8
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 170:	89 2b       	or	r24, r25
 172:	08 95       	ret

00000174 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 174:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_read.constprop.0>
 178:	87 fd       	sbrc	r24, 7
 17a:	fc cf       	rjmp	.-8      	; 0x174 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 17e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <lcd_read.constprop.0>

00000182 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 186:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
    lcd_write(cmd,0);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	8c 2f       	mov	r24, r28
}
 18e:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 190:	0c 94 81 00 	jmp	0x102	; 0x102 <lcd_write>

00000194 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 198:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
    lcd_write(data,1);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	8c 2f       	mov	r24, r28
}
 1a0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 1a2:	0c 94 81 00 	jmp	0x102	; 0x102 <lcd_write>

000001a6 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
 1a6:	61 11       	cpse	r22, r1
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1aa:	80 58       	subi	r24, 0x80	; 128
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <lcd_gotoxy+0x1a>
    else if ( y==1)
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1b2:	80 54       	subi	r24, 0x40	; 64
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <lcd_gotoxy+0x1a>
    else if ( y==2)
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	11 f4       	brne	.+4      	; 0x1be <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 1ba:	8c 56       	subi	r24, 0x6C	; 108
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 1be:	8c 52       	subi	r24, 0x2C	; 44
 1c0:	0c 94 c1 00 	jmp	0x182	; 0x182 <lcd_command>

000001c4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 1c4:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
}
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret

000001cc <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0c 94 c1 00 	jmp	0x182	; 0x182 <lcd_command>

000001d2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0c 94 c1 00 	jmp	0x182	; 0x182 <lcd_command>

000001d8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1dc:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
 1e0:	98 2f       	mov	r25, r24
    if (c=='\n')
 1e2:	ca 30       	cpi	r28, 0x0A	; 10
 1e4:	a1 f4       	brne	.+40     	; 0x20e <lcd_putc+0x36>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
 1e6:	84 31       	cpi	r24, 0x14	; 20
 1e8:	48 f0       	brcs	.+18     	; 0x1fc <lcd_putc+0x24>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 1ea:	80 ec       	ldi	r24, 0xC0	; 192
 1ec:	89 0f       	add	r24, r25
 1ee:	84 31       	cpi	r24, 0x14	; 20
 1f0:	38 f0       	brcs	.+14     	; 0x200 <lcd_putc+0x28>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 1f2:	94 51       	subi	r25, 0x14	; 20
 1f4:	9c 32       	cpi	r25, 0x2C	; 44
 1f6:	30 f4       	brcc	.+12     	; 0x204 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
 1f8:	84 e5       	ldi	r24, 0x54	; 84
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <lcd_putc+0x2e>
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <lcd_putc+0x2e>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
 200:	84 e1       	ldi	r24, 0x14	; 20
 202:	01 c0       	rjmp	.+2      	; 0x206 <lcd_putc+0x2e>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
 204:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 206:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 208:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 20a:	0c 94 c1 00 	jmp	0x182	; 0x182 <lcd_command>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 212:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 214:	0c 94 81 00 	jmp	0x102	; 0x102 <lcd_write>

00000218 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 21e:	89 91       	ld	r24, Y+
 220:	88 23       	and	r24, r24
 222:	19 f0       	breq	.+6      	; 0x22a <lcd_puts+0x12>
        lcd_putc(c);
 224:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
 228:	fa cf       	rjmp	.-12     	; 0x21e <lcd_puts+0x6>
    }

}/* lcd_puts */
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 236:	84 91       	lpm	r24, Z
 238:	ef 01       	movw	r28, r30
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	88 23       	and	r24, r24
 23e:	21 f0       	breq	.+8      	; 0x248 <lcd_puts_p+0x18>
        lcd_putc(c);
 240:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
 244:	fe 01       	movw	r30, r28
 246:	f7 cf       	rjmp	.-18     	; 0x236 <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 252:	97 b1       	in	r25, 0x07	; 7
 254:	9f 67       	ori	r25, 0x7F	; 127
 256:	97 b9       	out	0x07, r25	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 258:	e0 ea       	ldi	r30, 0xA0	; 160
 25a:	ff e0       	ldi	r31, 0x0F	; 15
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 260:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 262:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 264:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 268:	e0 ee       	ldi	r30, 0xE0	; 224
 26a:	f4 e0       	ldi	r31, 0x04	; 4
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init+0x1e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 270:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 274:	e0 e1       	ldi	r30, 0x10	; 16
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init+0x2a>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 27c:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 280:	e0 e1       	ldi	r30, 0x10	; 16
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x36>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 288:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 28a:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 28e:	e0 e1       	ldi	r30, 0x10	; 16
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2ac:	8c 2f       	mov	r24, r28

}/* lcd_init */
 2ae:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 2b0:	0c 94 c1 00 	jmp	0x182	; 0x182 <lcd_command>

000002b4 <main>:


int main(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	27 97       	sbiw	r28, 0x07	; 7
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
 2c8:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 2ca:	5a 9a       	sbi	0x0b, 2	; 11


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 2cc:	8c e0       	ldi	r24, 0x0C	; 12
 2ce:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_init>
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 2d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
 2de:	81 e1       	ldi	r24, 0x11	; 17
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 2ee:	8a e3       	ldi	r24, 0x3A	; 58
 2f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 2f4:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 2f8:	8e e0       	ldi	r24, 0x0E	; 14
 2fa:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 2fe:	88 e1       	ldi	r24, 0x18	; 24
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 306:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 30a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 30e:	89 e8       	ldi	r24, 0x89	; 137
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 18 01 	call	0x230	; 0x230 <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 316:	88 e6       	ldi	r24, 0x68	; 104
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 18 01 	call	0x230	; 0x230 <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 324:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 328:	8c e0       	ldi	r24, 0x0C	; 12
 32a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 32e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clrscr>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 332:	4a e0       	ldi	r20, 0x0A	; 10
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	be 01       	movw	r22, r28
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	86 e8       	ldi	r24, 0x86	; 134
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 ca 01 	call	0x394	; 0x394 <itoa>
        
        /* put converted string to display */
        lcd_puts(buffer);
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 34c:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 350:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 354:	8e e1       	ldi	r24, 0x1E	; 30
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 35c:	80 e4       	ldi	r24, 0x40	; 64
 35e:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
 362:	0b ea       	ldi	r16, 0xAB	; 171
 364:	10 e0       	ldi	r17, 0x00	; 0
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 366:	f8 01       	movw	r30, r16
 368:	84 91       	lpm	r24, Z
 36a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_data>
 36e:	0f 5f       	subi	r16, 0xFF	; 255
 370:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	0b 3b       	cpi	r16, 0xBB	; 187
 376:	1f 07       	cpc	r17, r31
 378:	b1 f7       	brne	.-20     	; 0x366 <main+0xb2>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
       lcd_putc(1);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 38e:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
              
    }
 392:	9f cf       	rjmp	.-194    	; 0x2d2 <main+0x1e>

00000394 <itoa>:
 394:	fb 01       	movw	r30, r22
 396:	9f 01       	movw	r18, r30
 398:	e8 94       	clt
 39a:	42 30       	cpi	r20, 0x02	; 2
 39c:	c4 f0       	brlt	.+48     	; 0x3ce <itoa+0x3a>
 39e:	45 32       	cpi	r20, 0x25	; 37
 3a0:	b4 f4       	brge	.+44     	; 0x3ce <itoa+0x3a>
 3a2:	4a 30       	cpi	r20, 0x0A	; 10
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <itoa+0x1c>
 3a6:	97 fb       	bst	r25, 7
 3a8:	1e f4       	brtc	.+6      	; 0x3b0 <itoa+0x1c>
 3aa:	90 95       	com	r25
 3ac:	81 95       	neg	r24
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	64 2f       	mov	r22, r20
 3b2:	77 27       	eor	r23, r23
 3b4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__udivmodhi4>
 3b8:	80 5d       	subi	r24, 0xD0	; 208
 3ba:	8a 33       	cpi	r24, 0x3A	; 58
 3bc:	0c f0       	brlt	.+2      	; 0x3c0 <itoa+0x2c>
 3be:	89 5d       	subi	r24, 0xD9	; 217
 3c0:	81 93       	st	Z+, r24
 3c2:	cb 01       	movw	r24, r22
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	a1 f7       	brne	.-24     	; 0x3b0 <itoa+0x1c>
 3c8:	16 f4       	brtc	.+4      	; 0x3ce <itoa+0x3a>
 3ca:	5d e2       	ldi	r21, 0x2D	; 45
 3cc:	51 93       	st	Z+, r21
 3ce:	10 82       	st	Z, r1
 3d0:	c9 01       	movw	r24, r18
 3d2:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <strrev>

000003d6 <strrev>:
 3d6:	dc 01       	movw	r26, r24
 3d8:	fc 01       	movw	r30, r24
 3da:	67 2f       	mov	r22, r23
 3dc:	71 91       	ld	r23, Z+
 3de:	77 23       	and	r23, r23
 3e0:	e1 f7       	brne	.-8      	; 0x3da <strrev+0x4>
 3e2:	32 97       	sbiw	r30, 0x02	; 2
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <strrev+0x18>
 3e6:	7c 91       	ld	r23, X
 3e8:	6d 93       	st	X+, r22
 3ea:	70 83       	st	Z, r23
 3ec:	62 91       	ld	r22, -Z
 3ee:	ae 17       	cp	r26, r30
 3f0:	bf 07       	cpc	r27, r31
 3f2:	c8 f3       	brcs	.-14     	; 0x3e6 <strrev+0x10>
 3f4:	08 95       	ret

000003f6 <__udivmodhi4>:
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	51 e1       	ldi	r21, 0x11	; 17
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__udivmodhi4_ep>

000003fe <__udivmodhi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a6 17       	cp	r26, r22
 404:	b7 07       	cpc	r27, r23
 406:	10 f0       	brcs	.+4      	; 0x40c <__udivmodhi4_ep>
 408:	a6 1b       	sub	r26, r22
 40a:	b7 0b       	sbc	r27, r23

0000040c <__udivmodhi4_ep>:
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	5a 95       	dec	r21
 412:	a9 f7       	brne	.-22     	; 0x3fe <__udivmodhi4_loop>
 414:	80 95       	com	r24
 416:	90 95       	com	r25
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	08 95       	ret

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
