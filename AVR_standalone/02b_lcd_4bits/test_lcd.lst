   1               		.file	"test_lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	wait_until_key_pressed
  12               	wait_until_key_pressed:
  13               	.LFB11:
  14               		.file 1 "test_lcd.c"
   1:test_lcd.c    **** /*************************************************************************
   2:test_lcd.c    **** Title:    testing output to a HD44780 based LCD display.
   3:test_lcd.c    **** Author:   Peter Fleury  <pfleury@gmx.ch>  http://jump.to/fleury
   4:test_lcd.c    **** File:     $Id: test_lcd.c,v 1.6 2004/12/10 13:53:59 peter Exp $
   5:test_lcd.c    **** Software: AVR-GCC 3.3
   6:test_lcd.c    **** Hardware: HD44780 compatible LCD text display
   7:test_lcd.c    ****           ATS90S8515/ATmega if memory-mapped LCD interface is used
   8:test_lcd.c    ****           any AVR with 7 free I/O pins if 4-bit IO port mode is used
   9:test_lcd.c    **** **************************************************************************/
  10:test_lcd.c    **** #include <stdlib.h>
  11:test_lcd.c    **** #include <avr/io.h>
  12:test_lcd.c    **** #include <avr/pgmspace.h>
  13:test_lcd.c    **** #include "lcd.h"
  14:test_lcd.c    **** #include <util/delay.h>
  15:test_lcd.c    **** 
  16:test_lcd.c    **** #define F_CPU 8000000UL
  17:test_lcd.c    **** /*
  18:test_lcd.c    **** ** constant definitions
  19:test_lcd.c    **** */
  20:test_lcd.c    **** static const PROGMEM unsigned char copyRightChar[] =
  21:test_lcd.c    **** {
  22:test_lcd.c    **** 	0x07, 0x08, 0x13, 0x14, 0x14, 0x13, 0x08, 0x07,
  23:test_lcd.c    **** 	0x00, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x00
  24:test_lcd.c    **** };
  25:test_lcd.c    **** 
  26:test_lcd.c    **** 
  27:test_lcd.c    **** /*
  28:test_lcd.c    **** ** function prototypes
  29:test_lcd.c    **** */ 
  30:test_lcd.c    **** void wait_until_key_pressed(void);
  31:test_lcd.c    **** 
  32:test_lcd.c    **** 
  33:test_lcd.c    **** void wait_until_key_pressed(void)
  34:test_lcd.c    **** {
  15               		.loc 1 34 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L3:
  35:test_lcd.c    ****     unsigned char temp1, temp2;
  36:test_lcd.c    ****     unsigned int i;
  37:test_lcd.c    ****     
  38:test_lcd.c    ****     do {
  39:test_lcd.c    ****         temp1 = PIND;                  // read input
  22               		.loc 1 39 0
  23 0000 89B1      		in r24,0x9
  24               	.LVL0:
  40:test_lcd.c    ****         for(i=0;i<65535;i++);
  41:test_lcd.c    ****         temp2 = PIND;                  // read input
  25               		.loc 1 41 0
  26 0002 99B1      		in r25,0x9
  27               	.LVL1:
  42:test_lcd.c    ****         temp1 = (temp1 & temp2);       // debounce input
  28               		.loc 1 42 0
  29 0004 8923      		and r24,r25
  30               	.LVL2:
  43:test_lcd.c    ****     } while ( temp1 & _BV(PIND2) );
  31               		.loc 1 43 0
  32 0006 82FD      		sbrc r24,2
  33 0008 00C0      		rjmp .L3
  34               	.L5:
  44:test_lcd.c    ****     
  45:test_lcd.c    ****     loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
  35               		.loc 1 45 0
  36 000a 4A9B      		sbis 0x9,2
  37 000c 00C0      		rjmp .L5
  38               	/* epilogue start */
  46:test_lcd.c    **** }
  39               		.loc 1 46 0
  40 000e 0895      		ret
  41               		.cfi_endproc
  42               	.LFE11:
  44               		.section	.rodata.str1.1,"aMS",@progbits,1
  45               	.LC0:
  46 0000 4C43 4420 		.string	"LCD Test Line 1\n"
  46      5465 7374 
  46      204C 696E 
  46      6520 310A 
  46      00
  47               	.LC1:
  48 0011 4C69 6E65 		.string	"Line 2"
  48      2032 00
  49               	.LC2:
  50 0018 4375 724F 		.string	"CurOn"
  50      6E00 
  51               	.LC3:
  52 001e 436F 7079 		.string	"Copyright: "
  52      7269 6768 
  52      743A 2000 
  53               		.section	.text.startup,"ax",@progbits
  54               	.global	main
  56               	main:
  57               	.LFB12:
  47:test_lcd.c    **** 
  48:test_lcd.c    **** 
  49:test_lcd.c    **** int main(void)
  50:test_lcd.c    **** {
  58               		.loc 1 50 0
  59               		.cfi_startproc
  60 0000 CF93      		push r28
  61               	.LCFI0:
  62               		.cfi_def_cfa_offset 3
  63               		.cfi_offset 28, -2
  64 0002 DF93      		push r29
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 4
  67               		.cfi_offset 29, -3
  68 0004 CDB7      		in r28,__SP_L__
  69 0006 DEB7      		in r29,__SP_H__
  70               	.LCFI2:
  71               		.cfi_def_cfa_register 28
  72 0008 2797      		sbiw r28,7
  73               	.LCFI3:
  74               		.cfi_def_cfa_offset 11
  75 000a 0FB6      		in __tmp_reg__,__SREG__
  76 000c F894      		cli
  77 000e DEBF      		out __SP_H__,r29
  78 0010 0FBE      		out __SREG__,__tmp_reg__
  79 0012 CDBF      		out __SP_L__,r28
  80               	/* prologue: function */
  81               	/* frame size = 7 */
  82               	/* stack size = 9 */
  83               	.L__stack_usage = 9
  84               	.LVL3:
  51:test_lcd.c    ****     char buffer[7];
  52:test_lcd.c    ****     int  num=134;
  53:test_lcd.c    ****     unsigned char i;
  54:test_lcd.c    ****     
  55:test_lcd.c    ****     
  56:test_lcd.c    ****     DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
  85               		.loc 1 56 0
  86 0014 5298      		cbi 0xa,2
  57:test_lcd.c    ****     PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
  87               		.loc 1 57 0
  88 0016 5A9A      		sbi 0xb,2
  58:test_lcd.c    ****     DDRB |= (1 << PB0);		/* Led na porta PB0 para sinalizacao */
  89               		.loc 1 58 0
  90 0018 209A      		sbi 0x4,0
  59:test_lcd.c    **** 
  60:test_lcd.c    ****     //-----------------
  61:test_lcd.c    ****     DDRD |= (1 << PD5);
  91               		.loc 1 61 0
  92 001a 559A      		sbi 0xa,5
  62:test_lcd.c    ****     DDRD |= (1 << PD6);
  93               		.loc 1 62 0
  94 001c 569A      		sbi 0xa,6
  63:test_lcd.c    ****     DDRD |= (1 << PD7);
  95               		.loc 1 63 0
  96 001e 579A      		sbi 0xa,7
  64:test_lcd.c    ****     PORTD &= ~((1<<PD5)|(1<<PD6)|(1<<PD7));
  97               		.loc 1 64 0
  98 0020 8BB1      		in r24,0xb
  99 0022 8F71      		andi r24,lo8(31)
 100 0024 8BB9      		out 0xb,r24
  65:test_lcd.c    ****     //-----------------
  66:test_lcd.c    ****     DDRC |= (1 << PC0);
 101               		.loc 1 66 0
 102 0026 389A      		sbi 0x7,0
  67:test_lcd.c    ****     DDRC |= (1 << PC1);
 103               		.loc 1 67 0
 104 0028 399A      		sbi 0x7,1
  68:test_lcd.c    ****     DDRC |= (1 << PC2);
 105               		.loc 1 68 0
 106 002a 3A9A      		sbi 0x7,2
  69:test_lcd.c    ****     DDRC |= (1 << PC3);
 107               		.loc 1 69 0
 108 002c 3B9A      		sbi 0x7,3
  70:test_lcd.c    **** 
  71:test_lcd.c    **** 	PORTB=0b1; _delay_ms(1000);
 109               		.loc 1 71 0
 110 002e 81E0      		ldi r24,lo8(1)
 111 0030 85B9      		out 0x5,r24
 112               	.LVL4:
 113               	.LBB25:
 114               	.LBB26:
 115               		.file 2 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1056\\avr8-gnu-too
   1:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  41:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  42:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  43:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  44:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  45:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  46:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  47:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  49:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  51:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  52:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  53:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  54:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  58:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  59:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  60:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  62:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  67:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  68:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  75:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  76:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  77:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  78:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  81:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  82:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  84:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  87:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  88:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  89:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  90:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
  92:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  93:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  94:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
  95:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  97:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  98:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 101:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 102:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 103:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 104:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 105:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 106:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 107:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 109:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 112:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 114:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 119:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 120:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 124:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 125:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    to round down and round to closest integer.
 131:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 132:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    Also, the backward compatible
 136:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 139:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 140:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 141:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 142:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 143:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 144:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ; 
 145:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 148:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 149:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 155:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 158:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 159:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 160:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 162:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 163:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 116               		.loc 2 163 0
 117 0032 2FE3      		ldi r18,lo8(199999)
 118 0034 8DE0      		ldi r24,hi8(199999)
 119 0036 93E0      		ldi r25,hlo8(199999)
 120 0038 2150      		1: subi r18,1
 121 003a 8040      		sbci r24,0
 122 003c 9040      		sbci r25,0
 123 003e 01F4      		brne 1b
 124 0040 00C0      		rjmp .
 125 0042 0000      		nop
 126               	.LBE26:
 127               	.LBE25:
  72:test_lcd.c    **** 	PORTB=0b0; _delay_ms(1000);
 128               		.loc 1 72 0
 129 0044 15B8      		out 0x5,__zero_reg__
 130               	.LVL5:
 131               	.LBB27:
 132               	.LBB28:
 133               		.loc 2 163 0
 134 0046 EFE3      		ldi r30,lo8(199999)
 135 0048 FDE0      		ldi r31,hi8(199999)
 136 004a 23E0      		ldi r18,hlo8(199999)
 137 004c E150      		1: subi r30,1
 138 004e F040      		sbci r31,0
 139 0050 2040      		sbci r18,0
 140 0052 01F4      		brne 1b
 141 0054 00C0      		rjmp .
 142 0056 0000      		nop
 143               	.LBE28:
 144               	.LBE27:
  73:test_lcd.c    **** 	PORTB=0b1; _delay_ms(1000);
 145               		.loc 1 73 0
 146 0058 81E0      		ldi r24,lo8(1)
 147 005a 85B9      		out 0x5,r24
 148               	.LVL6:
 149               	.LBB29:
 150               	.LBB30:
 151               		.loc 2 163 0
 152 005c 8FE3      		ldi r24,lo8(199999)
 153 005e 9DE0      		ldi r25,hi8(199999)
 154 0060 E3E0      		ldi r30,hlo8(199999)
 155 0062 8150      		1: subi r24,1
 156 0064 9040      		sbci r25,0
 157 0066 E040      		sbci r30,0
 158 0068 01F4      		brne 1b
 159 006a 00C0      		rjmp .
 160 006c 0000      		nop
 161               	.LBE30:
 162               	.LBE29:
  74:test_lcd.c    **** 	PORTB=0b0; _delay_ms(1000);
 163               		.loc 1 74 0
 164 006e 15B8      		out 0x5,__zero_reg__
 165               	.LVL7:
 166               	.LBB31:
 167               	.LBB32:
 168               		.loc 2 163 0
 169 0070 FFE3      		ldi r31,lo8(199999)
 170 0072 2DE0      		ldi r18,hi8(199999)
 171 0074 83E0      		ldi r24,hlo8(199999)
 172 0076 F150      		1: subi r31,1
 173 0078 2040      		sbci r18,0
 174 007a 8040      		sbci r24,0
 175 007c 01F4      		brne 1b
 176 007e 00C0      		rjmp .
 177 0080 0000      		nop
 178               	.LBE32:
 179               	.LBE31:
  75:test_lcd.c    **** 	PORTB=0b1; _delay_ms(1000);
 180               		.loc 1 75 0
 181 0082 81E0      		ldi r24,lo8(1)
 182 0084 85B9      		out 0x5,r24
 183               	.LVL8:
 184               	.LBB33:
 185               	.LBB34:
 186               		.loc 2 163 0
 187 0086 9FE3      		ldi r25,lo8(199999)
 188 0088 EDE0      		ldi r30,hi8(199999)
 189 008a F3E0      		ldi r31,hlo8(199999)
 190 008c 9150      		1: subi r25,1
 191 008e E040      		sbci r30,0
 192 0090 F040      		sbci r31,0
 193 0092 01F4      		brne 1b
 194 0094 00C0      		rjmp .
 195 0096 0000      		nop
 196               	.LBE34:
 197               	.LBE33:
  76:test_lcd.c    **** 	PORTB=0b0; _delay_ms(1000);
 198               		.loc 1 76 0
 199 0098 15B8      		out 0x5,__zero_reg__
 200               	.LVL9:
 201               	.LBB35:
 202               	.LBB36:
 203               		.loc 2 163 0
 204 009a 2FE3      		ldi r18,lo8(199999)
 205 009c 8DE0      		ldi r24,hi8(199999)
 206 009e 93E0      		ldi r25,hlo8(199999)
 207 00a0 2150      		1: subi r18,1
 208 00a2 8040      		sbci r24,0
 209 00a4 9040      		sbci r25,0
 210 00a6 01F4      		brne 1b
 211 00a8 00C0      		rjmp .
 212 00aa 0000      		nop
 213               	.LBE36:
 214               	.LBE35:
  77:test_lcd.c    **** 
  78:test_lcd.c    ****     /* initialize display, cursor off */
  79:test_lcd.c    ****     lcd_init(LCD_DISP_ON);
 215               		.loc 1 79 0
 216 00ac 8CE0      		ldi r24,lo8(12)
 217 00ae 0E94 0000 		call lcd_init
 218               	.LVL10:
  80:test_lcd.c    **** 	PORTB=0b1; _delay_ms(1000);
 219               		.loc 1 80 0
 220 00b2 81E0      		ldi r24,lo8(1)
 221 00b4 85B9      		out 0x5,r24
 222               	.LVL11:
 223               	.LBB37:
 224               	.LBB38:
 225               		.loc 2 163 0
 226 00b6 EFE3      		ldi r30,lo8(199999)
 227 00b8 FDE0      		ldi r31,hi8(199999)
 228 00ba 23E0      		ldi r18,hlo8(199999)
 229 00bc E150      		1: subi r30,1
 230 00be F040      		sbci r31,0
 231 00c0 2040      		sbci r18,0
 232 00c2 01F4      		brne 1b
 233 00c4 00C0      		rjmp .
 234 00c6 0000      		nop
 235               	.LBE38:
 236               	.LBE37:
  81:test_lcd.c    **** 	PORTB=0b0; _delay_ms(1000);
 237               		.loc 1 81 0
 238 00c8 15B8      		out 0x5,__zero_reg__
 239               	.LVL12:
 240               	.LBB39:
 241               	.LBB40:
 242               		.loc 2 163 0
 243 00ca 8FE3      		ldi r24,lo8(199999)
 244 00cc 9DE0      		ldi r25,hi8(199999)
 245 00ce E3E0      		ldi r30,hlo8(199999)
 246 00d0 8150      		1: subi r24,1
 247 00d2 9040      		sbci r25,0
 248 00d4 E040      		sbci r30,0
 249 00d6 01F4      		brne 1b
 250 00d8 00C0      		rjmp .
 251 00da 0000      		nop
 252               	.L11:
 253               	.LBE40:
 254               	.LBE39:
  82:test_lcd.c    **** 
  83:test_lcd.c    ****     for (;;) {                           /* loop forever */
  84:test_lcd.c    ****         /* 
  85:test_lcd.c    ****          * Test 1:  write text to display
  86:test_lcd.c    ****          */
  87:test_lcd.c    **** 
  88:test_lcd.c    ****         /* clear display and home cursor */
  89:test_lcd.c    ****         lcd_clrscr();
 255               		.loc 1 89 0
 256 00dc 0E94 0000 		call lcd_clrscr
 257               	.LVL13:
  90:test_lcd.c    ****         
  91:test_lcd.c    ****         /* put string to display (line 1) with linefeed */
  92:test_lcd.c    ****         lcd_puts("LCD Test Line 1\n");
 258               		.loc 1 92 0
 259 00e0 80E0      		ldi r24,lo8(.LC0)
 260 00e2 90E0      		ldi r25,hi8(.LC0)
 261 00e4 0E94 0000 		call lcd_puts
 262               	.LVL14:
  93:test_lcd.c    **** 
  94:test_lcd.c    ****         /* cursor is now on second line, write second line */
  95:test_lcd.c    ****         lcd_puts("Line 2");
 263               		.loc 1 95 0
 264 00e8 80E0      		ldi r24,lo8(.LC1)
 265 00ea 90E0      		ldi r25,hi8(.LC1)
 266 00ec 0E94 0000 		call lcd_puts
 267               	.LVL15:
  96:test_lcd.c    ****         
  97:test_lcd.c    ****         /* move cursor to position 8 on line 2 */
  98:test_lcd.c    ****         lcd_gotoxy(7,1);  
 268               		.loc 1 98 0
 269 00f0 61E0      		ldi r22,lo8(1)
 270 00f2 87E0      		ldi r24,lo8(7)
 271 00f4 0E94 0000 		call lcd_gotoxy
 272               	.LVL16:
  99:test_lcd.c    ****         
 100:test_lcd.c    ****         /* write single char to display */
 101:test_lcd.c    ****         lcd_putc(':');
 273               		.loc 1 101 0
 274 00f8 8AE3      		ldi r24,lo8(58)
 275 00fa 0E94 0000 		call lcd_putc
 276               	.LVL17:
 102:test_lcd.c    ****         
 103:test_lcd.c    ****         /* wait until push button PD2 (INT0) is pressed */
 104:test_lcd.c    ****         wait_until_key_pressed();
 277               		.loc 1 104 0
 278 00fe 0E94 0000 		call wait_until_key_pressed
 279               	.LVL18:
 105:test_lcd.c    ****         
 106:test_lcd.c    ****         
 107:test_lcd.c    ****         /*
 108:test_lcd.c    ****          * Test 2: use lcd_command() to turn on cursor
 109:test_lcd.c    ****          */
 110:test_lcd.c    ****         
 111:test_lcd.c    ****         /* turn on cursor */
 112:test_lcd.c    ****         lcd_command(LCD_DISP_ON_CURSOR);
 280               		.loc 1 112 0
 281 0102 8EE0      		ldi r24,lo8(14)
 282 0104 0E94 0000 		call lcd_command
 283               	.LVL19:
 113:test_lcd.c    **** 
 114:test_lcd.c    ****         /* put string */
 115:test_lcd.c    ****         lcd_puts( "CurOn");
 284               		.loc 1 115 0
 285 0108 80E0      		ldi r24,lo8(.LC2)
 286 010a 90E0      		ldi r25,hi8(.LC2)
 287 010c 0E94 0000 		call lcd_puts
 288               	.LVL20:
 116:test_lcd.c    ****         
 117:test_lcd.c    ****         /* wait until push button PD2 (INT0) is pressed */
 118:test_lcd.c    ****         wait_until_key_pressed();
 289               		.loc 1 118 0
 290 0110 0E94 0000 		call wait_until_key_pressed
 291               	.LVL21:
 119:test_lcd.c    **** 
 120:test_lcd.c    **** 
 121:test_lcd.c    ****         /*
 122:test_lcd.c    ****          * Test 3: display shift
 123:test_lcd.c    ****          */
 124:test_lcd.c    ****         
 125:test_lcd.c    ****         lcd_clrscr();     /* clear display home cursor */
 292               		.loc 1 125 0
 293 0114 0E94 0000 		call lcd_clrscr
 294               	.LVL22:
 126:test_lcd.c    **** 
 127:test_lcd.c    ****         /* put string from program memory to display */
 128:test_lcd.c    ****         lcd_puts_P( "Line 1 longer than 14 characters\n" );
 295               		.loc 1 128 0
 296 0118 80E0      		ldi r24,lo8(__c.1940)
 297 011a 90E0      		ldi r25,hi8(__c.1940)
 298 011c 0E94 0000 		call lcd_puts_p
 299               	.LVL23:
 129:test_lcd.c    ****         lcd_puts_P( "Line 2 longer than 14 characters" );
 300               		.loc 1 129 0
 301 0120 80E0      		ldi r24,lo8(__c.1942)
 302 0122 90E0      		ldi r25,hi8(__c.1942)
 303 0124 0E94 0000 		call lcd_puts_p
 304               	.LVL24:
 130:test_lcd.c    ****         
 131:test_lcd.c    ****         /* move BOTH lines one position to the left */
 132:test_lcd.c    ****         lcd_command(LCD_MOVE_DISP_LEFT);
 305               		.loc 1 132 0
 306 0128 88E1      		ldi r24,lo8(24)
 307 012a 0E94 0000 		call lcd_command
 308               	.LVL25:
 133:test_lcd.c    ****         
 134:test_lcd.c    ****         /* wait until push button PD2 (INT0) is pressed */
 135:test_lcd.c    ****         wait_until_key_pressed();
 309               		.loc 1 135 0
 310 012e 0E94 0000 		call wait_until_key_pressed
 311               	.LVL26:
 136:test_lcd.c    **** 
 137:test_lcd.c    ****         /* turn off cursor */
 138:test_lcd.c    ****         lcd_command(LCD_DISP_ON);
 312               		.loc 1 138 0
 313 0132 8CE0      		ldi r24,lo8(12)
 314 0134 0E94 0000 		call lcd_command
 315               	.LVL27:
 139:test_lcd.c    ****         
 140:test_lcd.c    ****         
 141:test_lcd.c    ****         /*
 142:test_lcd.c    ****          *   Test: Display integer values
 143:test_lcd.c    ****          */
 144:test_lcd.c    ****         
 145:test_lcd.c    ****         lcd_clrscr();   /* clear display home cursor */
 316               		.loc 1 145 0
 317 0138 0E94 0000 		call lcd_clrscr
 318               	.LVL28:
 319               	.LBB41:
 320               	.LBB42:
 321               		.file 3 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1056\\avr8-gnu-too
   1:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Copyright (c) 2004,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   4:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Portions of documentation Copyright (c) 1990, 1991, 1993, 1994
   5:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The Regents of the University of California.
   6:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   7:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    All rights reserved.
   8:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
   9:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Redistribution and use in source and binary forms, with or without
  10:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    modification, are permitted provided that the following conditions are met:
  11:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  12:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Redistributions of source code must retain the above copyright
  13:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      notice, this list of conditions and the following disclaimer.
  14:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  15:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Redistributions in binary form must reproduce the above copyright
  16:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      notice, this list of conditions and the following disclaimer in
  17:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      the documentation and/or other materials provided with the
  18:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      distribution.
  19:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  20:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    * Neither the name of the copyright holders nor the names of
  21:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      contributors may be used to endorse or promote products derived
  22:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      from this software without specific prior written permission.
  23:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  24:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  28:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   POSSIBILITY OF SUCH DAMAGE.
  35:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  36:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****   $Id$
  37:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
  38:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  39:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef _STDLIB_H_
  40:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	_STDLIB_H_ 1
  41:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  42:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ASSEMBLER__
  43:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  44:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_NULL
  45:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_size_t
  46:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __need_wchar_t
  47:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #include <stddef.h>
  48:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  49:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ptr_t
  50:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define __ptr_t void *
  51:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  52:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  53:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifdef __cplusplus
  54:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern "C" {
  55:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  56:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  57:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \file */
  58:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  59:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \defgroup avr_stdlib <stdlib.h>: General utilities
  60:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     \code #include <stdlib.h> \endcode
  61:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  62:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     This file declares some basic C macros and functions as
  63:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     defined by the ISO standard, plus some AVR-specific extensions.
  64:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
  65:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  66:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@{*/
  67:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Result type for function div(). */
  68:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef struct {
  69:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	int quot;                   /**< The Quotient. */
  70:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	int rem;                    /**< The Remainder. */
  71:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** } div_t;
  72:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  73:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Result type for function ldiv(). */
  74:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef struct {
  75:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	long quot;                  /**< The Quotient. */
  76:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	long rem;                   /**< The Remainder. */
  77:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** } ldiv_t;
  78:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  79:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Comparision function type for qsort(), just for convenience. */
  80:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** typedef int (*__compar_fn_t)(const void *, const void *);
  81:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  82:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
  83:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  84:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_CONST__
  85:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_CONST__ __attribute__((__const__))
  86:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  87:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  88:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_MALLOC__
  89:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_MALLOC__ __attribute__((__malloc__))
  90:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  91:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  92:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_NORETURN__
  93:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_NORETURN__ __attribute__((__noreturn__))
  94:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  95:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
  96:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __ATTR_PURE__
  97:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # define __ATTR_PURE__ __attribute__((__pure__))
  98:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
  99:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 100:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef	__ATTR_GNU_INLINE__
 101:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # ifdef  __GNUC_STDC_INLINE__
 102:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #  define __ATTR_GNU_INLINE__   __attribute__((__gnu_inline__))
 103:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # else
 104:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #  define __ATTR_GNU_INLINE__
 105:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** # endif
 106:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 107:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 108:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 109:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 110:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The abort() function causes abnormal program termination to occur.
 111:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     This realization disables interrupts and jumps to _exit() function
 112:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     with argument equal to 1. In the limited AVR environment, execution is
 113:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     effectively halted by entering an infinite loop. */
 114:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void abort(void) __ATTR_NORETURN__;
 115:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 116:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The abs() function computes the absolute value of the integer \c i.
 117:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 118:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 119:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int abs(int __i) __ATTR_CONST__;
 120:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
 121:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	abs(__i) __builtin_abs(__i)
 122:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 123:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 124:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** The labs() function computes the absolute value of the long integer
 125:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c i.
 126:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The abs() and labs() functions are builtins of gcc.
 127:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 128:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long labs(long __i) __ATTR_CONST__;
 129:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifndef __DOXYGEN__
 130:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define labs(__i) __builtin_labs(__i)
 131:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #endif
 132:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 133:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 134:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The bsearch() function searches an array of \c nmemb objects, the
 135:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      initial member of which is pointed to by \c base, for a member
 136:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      that matches the object pointed to by \c key.  The size of each
 137:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      member of the array is specified by \c size.
 138:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 139:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The contents of the array should be in ascending sorted order
 140:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      according to the comparison function referenced by \c compar.
 141:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The \c compar routine is expected to have two arguments which
 142:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      point to the key object and to an array member, in that order,
 143:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      and should return an integer less than, equal to, or greater than
 144:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      zero if the key object is found, respectively, to be less than,
 145:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      to match, or be greater than the array member.
 146:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 147:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The bsearch() function returns a pointer to a matching member of
 148:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      the array, or a null pointer if no match is found.  If two
 149:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      members compare as equal, which member is matched is unspecified.
 150:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 151:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
 152:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 		     size_t __size, int (*__compar)(const void *, const void *));
 153:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 154:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /* __divmodhi4 and __divmodsi4 from libgcc.a */
 155:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 156:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The div() function computes the value \c num/denom and returns
 157:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      the quotient and remainder in a structure named \c div_t that
 158:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      contains two int members named \c quot and \c rem.
 159:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 160:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __ATTR_CONST__;
 161:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 162:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The ldiv() function computes the value \c num/denom and returns
 163:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      the quotient and remainder in a structure named \c ldiv_t that
 164:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      contains two long integer members named \c quot and \c rem.
 165:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 166:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __ATTR_CONST__;
 167:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 168:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 169:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The qsort() function is a modified partition-exchange sort, or
 170:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      quicksort.
 171:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 172:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The qsort() function sorts an array of \c nmemb objects, the
 173:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      initial member of which is pointed to by \c base.  The size of
 174:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      each object is specified by \c size.  The contents of the array
 175:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      base are sorted in ascending order according to a comparison
 176:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      function pointed to by \c compar, which requires two arguments
 177:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      pointing to the objects being compared.
 178:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 179:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The comparison function must return an integer less than, equal
 180:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      to, or greater than zero if the first argument is considered to
 181:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      be respectively less than, equal to, or greater than the second.
 182:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 183:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void qsort(void *__base, size_t __nmemb, size_t __size,
 184:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 		  __compar_fn_t __compar);
 185:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 186:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 187:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtol() function converts the string in \c nptr to a long
 188:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     value.  The conversion is done according to the given base, which
 189:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     must be between 2 and 36 inclusive, or be the special value 0.
 190:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 191:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 192:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 193:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 194:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 195:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 196:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 197:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 198:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The remainder of the string is converted to a long value in the
 199:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     obvious manner, stopping at the first character which is not a
 200:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     valid digit in the given base.  (In bases above 10, the letter \c 'A'
 201:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     in either upper or lower case represents 10, \c 'B' represents 11,
 202:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     and so forth, with \c 'Z' representing 35.)
 203:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 204:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     If \c endptr is not NULL, strtol() stores the address of the first
 205:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 206:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     however, strtol() stores the original value of \c nptr in \c
 207:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 208:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     on return, the entire string was valid.)
 209:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 210:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtol() function returns the result of the conversion, unless
 211:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     the value would underflow or overflow.  If no conversion could be
 212:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     performed, 0 is returned.  If an overflow or underflow occurs, \c
 213:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     errno is set to \ref avr_errno "ERANGE" and the function return value
 214:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     is clamped to \c LONG_MIN or \c LONG_MAX, respectively.
 215:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 216:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long strtol(const char *__nptr, char **__endptr, int __base);
 217:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 218:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 219:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtoul() function converts the string in \c nptr to an
 220:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     unsigned long value.  The conversion is done according to the
 221:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     given base, which must be between 2 and 36 inclusive, or be the
 222:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     special value 0.
 223:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 224:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The string may begin with an arbitrary amount of white space (as
 225:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     determined by isspace()) followed by a single optional \c '+' or \c '-'
 226:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     sign.  If \c base is zero or 16, the string may then include a
 227:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c "0x" prefix, and the number will be read in base 16; otherwise,
 228:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     a zero base is taken as 10 (decimal) unless the next character is
 229:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     \c '0', in which case it is taken as 8 (octal).
 230:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 231:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The remainder of the string is converted to an unsigned long value
 232:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     in the obvious manner, stopping at the first character which is
 233:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     not a valid digit in the given base.  (In bases above 10, the
 234:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     letter \c 'A' in either upper or lower case represents 10, \c 'B'
 235:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     represents 11, and so forth, with \c 'Z' representing 35.)
 236:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 237:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     If \c endptr is not NULL, strtoul() stores the address of the first
 238:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     invalid character in \c *endptr.  If there were no digits at all,
 239:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     however, strtoul() stores the original value of \c nptr in \c
 240:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     *endptr.  (Thus, if \c *nptr is not \c '\\0' but \c **endptr is \c '\\0'
 241:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     on return, the entire string was valid.)
 242:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 243:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The strtoul() function return either the result of the conversion
 244:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     or, if there was a leading minus sign, the negation of the result
 245:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     of the conversion, unless the original (non-negated) value would
 246:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     overflow; in the latter case, strtoul() returns ULONG_MAX, and \c
 247:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     errno is set to \ref avr_errno "ERANGE".  If no conversion could 
 248:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     be performed, 0 is returned.
 249:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 250:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
 251:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 252:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 253:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atol() function converts the initial portion of the string
 254:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     pointed to by \p s to long integer representation. In contrast to
 255:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 256:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****         \code strtol(s, (char **)NULL, 10); \endcode
 257:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 258:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 259:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 260:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     stack) and works more quickly.
 261:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 262:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern long atol(const char *__s) __ATTR_PURE__;
 263:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 264:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 265:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     The atoi() function converts the initial portion of the string
 266:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     pointed to by \p s to integer representation. In contrast to
 267:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 268:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****         \code (int)strtol(s, (char **)NULL, 10); \endcode
 269:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 270:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     this function does not detect overflow (\c errno is not changed and
 271:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     the result value is not predictable), uses smaller memory (flash and
 272:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     stack) and works more quickly.
 273:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 274:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int atoi(const char *__s) __ATTR_PURE__;
 275:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 276:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 277:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The exit() function terminates the application.  Since there is no
 278:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    environment to return to, \c status is ignored, and code execution
 279:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    will eventually reach an infinite loop, thereby effectively halting
 280:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    all code processing.  Before entering the infinite loop, interrupts
 281:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    are globally disabled.
 282:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 283:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    In a C++ context, global destructors will be called before halting
 284:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    execution.
 285:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 286:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void exit(int __status) __ATTR_NORETURN__;
 287:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 288:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 289:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The malloc() function allocates \c size bytes of memory.
 290:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    If malloc() fails, a NULL pointer is returned.
 291:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 292:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Note that malloc() does \e not initialize the returned memory to
 293:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    zero bytes.
 294:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 295:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    See the chapter about \ref malloc "malloc() usage" for implementation
 296:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    details.
 297:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 298:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *malloc(size_t __size) __ATTR_MALLOC__;
 299:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 300:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 301:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The free() function causes the allocated memory referenced by \c
 302:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    ptr to be made available for future allocations.  If \c ptr is
 303:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    NULL, no action occurs.
 304:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 305:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void free(void *__ptr);
 306:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 307:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 308:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 309:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 310:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern size_t __malloc_margin;
 311:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 312:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 313:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 314:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 315:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *__malloc_heap_start;
 316:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 317:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 318:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() \ref malloc_tunables "tunable".
 319:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 320:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *__malloc_heap_end;
 321:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 322:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 323:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Allocate \c nele elements of \c size each.  Identical to calling
 324:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c malloc() using <tt>nele * size</tt> as argument, except the
 325:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    allocated memory will be cleared to zero.
 326:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 327:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *calloc(size_t __nele, size_t __size) __ATTR_MALLOC__;
 328:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 329:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 330:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The realloc() function tries to change the size of the region
 331:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    allocated at \c ptr to the new \c size value.  It returns a
 332:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    pointer to the new region.  The returned pointer might be the
 333:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    same as the old pointer, or a pointer to a completely different
 334:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    region.
 335:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 336:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The contents of the returned region up to either the old or the new
 337:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    size value (whatever is less) will be identical to the contents of
 338:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    the old region, even in case a new region had to be allocated.
 339:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 340:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    It is acceptable to pass \c ptr as NULL, in which case realloc()
 341:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    will behave identical to malloc().
 342:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 343:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    If the new memory cannot be allocated, realloc() returns NULL, and
 344:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    the region at \c ptr will not be changed.
 345:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 346:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void *realloc(void *__ptr, size_t __size) __ATTR_MALLOC__;
 347:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 348:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern double strtod(const char *__nptr, char **__endptr);
 349:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 350:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern double atof(const char *__nptr);
 351:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 352:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** Highest number that can be generated by rand(). */
 353:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #define	RAND_MAX 0x7FFF
 354:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 355:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 356:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The rand() function computes a sequence of pseudo-random integers in the
 357:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      range of 0 to \c RAND_MAX (as defined by the header file <stdlib.h>).
 358:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 359:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      The srand() function sets its argument \c seed as the seed for a new
 360:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      sequence of pseudo-random numbers to be returned by rand().  These
 361:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      sequences are repeatable by calling srand() with the same seed value.
 362:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 363:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      If no seed value is provided, the functions are automatically seeded with
 364:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      a value of 1.
 365:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 366:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      In compliance with the C standard, these functions operate on
 367:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      \c int arguments.  Since the underlying algorithm already uses
 368:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      32-bit calculations, this causes a loss of precision.  See
 369:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      \c random() for an alternate set of functions that retains full
 370:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****      32-bit precision.
 371:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 372:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int rand(void);
 373:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 374:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Pseudo-random number generator seeding; see rand().
 375:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 376:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern void srand(unsigned int __seed);
 377:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 378:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 379:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Variant of rand() that stores the context in the user-supplied
 380:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    variable located at \c ctx instead of a static library variable
 381:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    so the function becomes re-entrant.
 382:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 383:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern int rand_r(unsigned long *__ctx);
 384:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@}*/
 385:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 386:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /*@{*/
 387:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /** \name Non-standard (i.e. non-ISO C) functions.
 388:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****  \ingroup avr_stdlib
 389:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 390:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** /**
 391:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \brief Convert an integer to a string.
 392:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 393:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The function itoa() converts the integer value from \c val into an
 394:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    ASCII representation that will be stored under \c s.  The caller
 395:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    is responsible for providing sufficient storage in \c s.
 396:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 397:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \note The minimal size of the buffer \c s depends on the choice of
 398:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    radix. For example, if the radix is 2 (binary), you need to supply a buffer
 399:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    with a minimal length of 8 * sizeof (int) + 1 characters, i.e. one
 400:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    character for each bit plus one for the string terminator. Using a larger
 401:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    radix will require a smaller minimal buffer size.
 402:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 403:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \warning If the buffer is too small, you risk a buffer overflow.
 404:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 405:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    Conversion is done using the \c radix as base, which may be a
 406:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    number between 2 (binary conversion) and up to 36.  If \c radix
 407:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    is greater than 10, the next digit after \c '9' will be the letter
 408:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    \c 'a'.
 409:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     
 410:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     If radix is 10 and val is negative, a minus sign will be prepended.
 411:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 
 412:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****    The itoa() function returns the pointer passed as \c s.
 413:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** */
 414:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #ifdef  __DOXYGEN__
 415:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern char *itoa(int val, char *s, int radix);
 416:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** #else
 417:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** extern __inline__ __ATTR_GNU_INLINE__
 418:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** char *itoa (int __val, char *__s, int __radix)
 419:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** {
 420:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     if (!__builtin_constant_p (__radix)) {
 421:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	extern char *__itoa (int, char *, int);
 422:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __itoa (__val, __s, __radix);
 423:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     } else if (__radix < 2 || __radix > 36) {
 424:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	*__s = 0;
 425:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __s;
 426:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h ****     } else {
 427:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	extern char *__itoa_ncheck (int, char *, unsigned char);
 428:c:\program files (x86)\atmel\atmel toolchain\avr8 gcc\native\3.4.1056\avr8-gnu-toolchain\avr\include\stdlib.h **** 	return __itoa_ncheck (__val, __s, __radix);
 322               		.loc 3 428 0
 323 013c 4AE0      		ldi r20,lo8(10)
 324 013e BE01      		movw r22,r28
 325 0140 6F5F      		subi r22,-1
 326 0142 7F4F      		sbci r23,-1
 327 0144 86E8      		ldi r24,lo8(-122)
 328 0146 90E0      		ldi r25,0
 329 0148 0E94 0000 		call __itoa_ncheck
 330               	.LVL29:
 331               	.LBE42:
 332               	.LBE41:
 146:test_lcd.c    ****         
 147:test_lcd.c    ****         /* convert interger into string */
 148:test_lcd.c    ****         itoa( num , buffer, 10);
 149:test_lcd.c    ****         
 150:test_lcd.c    ****         /* put converted string to display */
 151:test_lcd.c    ****         lcd_puts(buffer);
 333               		.loc 1 151 0
 334 014c CE01      		movw r24,r28
 335 014e 0196      		adiw r24,1
 336 0150 0E94 0000 		call lcd_puts
 337               	.LVL30:
 152:test_lcd.c    ****         
 153:test_lcd.c    ****         /* wait until push button PD2 (INT0) is pressed */
 154:test_lcd.c    ****         wait_until_key_pressed();
 338               		.loc 1 154 0
 339 0154 0E94 0000 		call wait_until_key_pressed
 340               	.LVL31:
 155:test_lcd.c    ****         
 156:test_lcd.c    ****         
 157:test_lcd.c    ****         /*
 158:test_lcd.c    ****          *  Test: Display userdefined characters
 159:test_lcd.c    ****          */
 160:test_lcd.c    **** 
 161:test_lcd.c    ****        lcd_clrscr();   /* clear display home cursor */
 341               		.loc 1 161 0
 342 0158 0E94 0000 		call lcd_clrscr
 343               	.LVL32:
 162:test_lcd.c    ****        
 163:test_lcd.c    ****        lcd_puts("Copyright: ");
 344               		.loc 1 163 0
 345 015c 80E0      		ldi r24,lo8(.LC3)
 346 015e 90E0      		ldi r25,hi8(.LC3)
 347 0160 0E94 0000 		call lcd_puts
 348               	.LVL33:
 164:test_lcd.c    ****        
 165:test_lcd.c    ****        /*
 166:test_lcd.c    ****         * load two userdefined characters from program memory
 167:test_lcd.c    ****         * into LCD controller CG RAM location 0 and 1
 168:test_lcd.c    ****         */
 169:test_lcd.c    ****        lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 349               		.loc 1 169 0
 350 0164 80E4      		ldi r24,lo8(64)
 351 0166 0E94 0000 		call lcd_command
 352               	.LVL34:
 353 016a 00E0      		ldi r16,lo8(copyRightChar)
 354 016c 10E0      		ldi r17,hi8(copyRightChar)
 355               	.LVL35:
 356               	.L10:
 357               	.LBB43:
 170:test_lcd.c    ****        for(i=0; i<16; i++)
 171:test_lcd.c    ****        {
 172:test_lcd.c    ****            lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 358               		.loc 1 172 0 discriminator 2
 359 016e F801      		movw r30,r16
 360               	/* #APP */
 361               	 ;  172 "test_lcd.c" 1
 362 0170 8491      		lpm r24, Z
 363               		
 364               	 ;  0 "" 2
 365               	.LVL36:
 366               	/* #NOAPP */
 367               	.LBE43:
 368 0172 0E94 0000 		call lcd_data
 369               	.LVL37:
 370 0176 0F5F      		subi r16,-1
 371 0178 1F4F      		sbci r17,-1
 372               	.LVL38:
 170:test_lcd.c    ****        for(i=0; i<16; i++)
 373               		.loc 1 170 0 discriminator 2
 374 017a F0E0      		ldi r31,hi8(copyRightChar+16)
 375 017c 0030      		cpi r16,lo8(copyRightChar+16)
 376 017e 1F07      		cpc r17,r31
 377 0180 01F4      		brne .L10
 173:test_lcd.c    ****        }
 174:test_lcd.c    ****        
 175:test_lcd.c    ****        /* move cursor to position 0 on line 2 */
 176:test_lcd.c    ****        /* Note: this switched back to DD RAM adresses */
 177:test_lcd.c    ****        lcd_gotoxy(0,1);
 378               		.loc 1 177 0
 379 0182 61E0      		ldi r22,lo8(1)
 380 0184 80E0      		ldi r24,0
 381 0186 0E94 0000 		call lcd_gotoxy
 382               	.LVL39:
 178:test_lcd.c    ****        
 179:test_lcd.c    ****        /* display user defined (c), built using two user defined chars */
 180:test_lcd.c    ****        lcd_putc(0);
 383               		.loc 1 180 0
 384 018a 80E0      		ldi r24,0
 385 018c 0E94 0000 		call lcd_putc
 386               	.LVL40:
 181:test_lcd.c    ****        lcd_putc(1);
 387               		.loc 1 181 0
 388 0190 81E0      		ldi r24,lo8(1)
 389 0192 0E94 0000 		call lcd_putc
 390               	.LVL41:
 182:test_lcd.c    ****        
 183:test_lcd.c    **** 
 184:test_lcd.c    ****        /* wait until push button PD2 (INT0) is pressed */
 185:test_lcd.c    ****        wait_until_key_pressed();
 391               		.loc 1 185 0
 392 0196 0E94 0000 		call wait_until_key_pressed
 393               	.LVL42:
 186:test_lcd.c    ****               
 187:test_lcd.c    ****     }
 394               		.loc 1 187 0
 395 019a 00C0      		rjmp .L11
 396               		.cfi_endproc
 397               	.LFE12:
 399               		.section	.progmem.data,"a",@progbits
 402               	__c.1942:
 403 0000 4C69 6E65 		.string	"Line 2 longer than 14 characters"
 403      2032 206C 
 403      6F6E 6765 
 403      7220 7468 
 403      616E 2031 
 406               	__c.1940:
 407 0021 4C69 6E65 		.string	"Line 1 longer than 14 characters\n"
 407      2031 206C 
 407      6F6E 6765 
 407      7220 7468 
 407      616E 2031 
 410               	copyRightChar:
 411 0043 07        		.byte	7
 412 0044 08        		.byte	8
 413 0045 13        		.byte	19
 414 0046 14        		.byte	20
 415 0047 14        		.byte	20
 416 0048 13        		.byte	19
 417 0049 08        		.byte	8
 418 004a 07        		.byte	7
 419 004b 00        		.byte	0
 420 004c 10        		.byte	16
 421 004d 08        		.byte	8
 422 004e 08        		.byte	8
 423 004f 08        		.byte	8
 424 0050 08        		.byte	8
 425 0051 10        		.byte	16
 426 0052 00        		.byte	0
 427               		.text
 428               	.Letext0:
 429               		.file 4 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1056\\avr8-gnu-too
 430               		.file 5 "lcd.h"
DEFINED SYMBOLS
                            *ABS*:00000000 test_lcd.c
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:2      *ABS*:0000003e __SP_H__
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:3      *ABS*:0000003d __SP_L__
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:4      *ABS*:0000003f __SREG__
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:6      *ABS*:00000001 __zero_reg__
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:12     .text:00000000 wait_until_key_pressed
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:56     .text.startup:00000000 main
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:406    .progmem.data:00000021 __c.1940
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:402    .progmem.data:00000000 __c.1942
C:\Users\roney\AppData\Local\Temp\ccE8kVo6.s:410    .progmem.data:00000043 copyRightChar

UNDEFINED SYMBOLS
lcd_init
lcd_clrscr
lcd_puts
lcd_gotoxy
lcd_putc
lcd_command
lcd_puts_p
__itoa_ncheck
lcd_data
__do_copy_data
