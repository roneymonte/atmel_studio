   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	toggle_e:
  12               	.LFB2:
  13               		.file 1 "lcd.c"
   1:lcd.c         **** /****************************************************************************
   2:lcd.c         ****  Title	:   HD44780U LCD library
   3:lcd.c         ****  Author:    Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury
   4:lcd.c         ****  File:	    $Id: lcd.c,v 1.14.2.2 2012/02/12 07:51:00 peter Exp $
   5:lcd.c         ****  Software:  AVR-GCC 3.3 
   6:lcd.c         ****  Target:    any AVR device, memory mapped mode only for AT90S4414/8515/Mega
   7:lcd.c         **** 
   8:lcd.c         ****  DESCRIPTION
   9:lcd.c         ****        Basic routines for interfacing a HD44780U-based text lcd display
  10:lcd.c         **** 
  11:lcd.c         ****        Originally based on Volker Oth's lcd library,
  12:lcd.c         ****        changed lcd_init(), added additional constants for lcd_command(),
  13:lcd.c         ****        added 4-bit I/O mode, improved and optimized code.
  14:lcd.c         **** 
  15:lcd.c         ****        Library can be operated in memory mapped mode (LCD_IO_MODE=0) or in 
  16:lcd.c         ****        4-bit IO port mode (LCD_IO_MODE=1). 8-bit IO port mode not supported.
  17:lcd.c         ****        
  18:lcd.c         ****        Memory mapped mode compatible with Kanda STK200, but supports also
  19:lcd.c         ****        generation of R/W signal through A8 address line.
  20:lcd.c         **** 
  21:lcd.c         ****  USAGE
  22:lcd.c         ****        See the C include lcd.h file for a description of each function
  23:lcd.c         ****        
  24:lcd.c         **** *****************************************************************************/
  25:lcd.c         **** #include <inttypes.h>
  26:lcd.c         **** #include <avr/io.h>
  27:lcd.c         **** #include <avr/pgmspace.h>
  28:lcd.c         **** #include "lcd.h"
  29:lcd.c         **** 
  30:lcd.c         **** 
  31:lcd.c         **** 
  32:lcd.c         **** /* 
  33:lcd.c         **** ** constants/macros 
  34:lcd.c         **** */
  35:lcd.c         **** #define DDR(x) (*(&x - 1))      /* address of data direction register of port x */
  36:lcd.c         **** #if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  37:lcd.c         ****     /* on ATmega64/128 PINF is on port 0x00 and not 0x60 */
  38:lcd.c         ****     #define PIN(x) ( &PORTF==&(x) ? _SFR_IO8(0x00) : (*(&x - 2)) )
  39:lcd.c         **** #else
  40:lcd.c         **** 	#define PIN(x) (*(&x - 2))    /* address of input register of port x          */
  41:lcd.c         **** #endif
  42:lcd.c         **** 
  43:lcd.c         **** 
  44:lcd.c         **** #if LCD_IO_MODE
  45:lcd.c         **** #define lcd_e_delay()   __asm__ __volatile__( "rjmp 1f\n 1:" );   //#define lcd_e_delay() __asm__ _
  46:lcd.c         **** #define lcd_e_high()    LCD_E_PORT  |=  _BV(LCD_E_PIN);
  47:lcd.c         **** #define lcd_e_low()     LCD_E_PORT  &= ~_BV(LCD_E_PIN);
  48:lcd.c         **** #define lcd_e_toggle()  toggle_e()
  49:lcd.c         **** #define lcd_rw_high()   LCD_RW_PORT |=  _BV(LCD_RW_PIN)
  50:lcd.c         **** #define lcd_rw_low()    LCD_RW_PORT &= ~_BV(LCD_RW_PIN)
  51:lcd.c         **** #define lcd_rs_high()   LCD_RS_PORT |=  _BV(LCD_RS_PIN)
  52:lcd.c         **** #define lcd_rs_low()    LCD_RS_PORT &= ~_BV(LCD_RS_PIN)
  53:lcd.c         **** #endif
  54:lcd.c         **** 
  55:lcd.c         **** #if LCD_IO_MODE
  56:lcd.c         **** #if LCD_LINES==1
  57:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_1LINE 
  58:lcd.c         **** #else
  59:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES 
  60:lcd.c         **** #endif
  61:lcd.c         **** #else
  62:lcd.c         **** #if LCD_LINES==1
  63:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_1LINE
  64:lcd.c         **** #else
  65:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_2LINES
  66:lcd.c         **** #endif
  67:lcd.c         **** #endif
  68:lcd.c         **** 
  69:lcd.c         **** #if LCD_CONTROLLER_KS0073
  70:lcd.c         **** #if LCD_LINES==4
  71:lcd.c         **** 
  72:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_ON  0x2C   /* |0|010|1100 4-bit mode, extension-bit RE = 
  73:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_OFF 0x28   /* |0|010|1000 4-bit mode, extension-bit RE = 
  74:lcd.c         **** #define KS0073_4LINES_MODE                    0x09   /* |0|000|1001 4 lines mode */
  75:lcd.c         **** 
  76:lcd.c         **** #endif
  77:lcd.c         **** #endif
  78:lcd.c         **** 
  79:lcd.c         **** /* 
  80:lcd.c         **** ** function prototypes 
  81:lcd.c         **** */
  82:lcd.c         **** #if LCD_IO_MODE
  83:lcd.c         **** static void toggle_e(void);
  84:lcd.c         **** #endif
  85:lcd.c         **** 
  86:lcd.c         **** /*
  87:lcd.c         **** ** local functions
  88:lcd.c         **** */
  89:lcd.c         **** 
  90:lcd.c         **** 
  91:lcd.c         **** 
  92:lcd.c         **** /*************************************************************************
  93:lcd.c         ****  delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
  94:lcd.c         **** *************************************************************************/
  95:lcd.c         **** static inline void _delayFourCycles(unsigned int __count)
  96:lcd.c         **** {
  97:lcd.c         ****     if ( __count == 0 )    
  98:lcd.c         ****         __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
  99:lcd.c         ****     else
 100:lcd.c         ****         __asm__ __volatile__ (
 101:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 102:lcd.c         ****     	    "brne 1b"                              // 4 cycles/loop
 103:lcd.c         ****     	    : "=w" (__count)
 104:lcd.c         ****     	    : "0" (__count)
 105:lcd.c         ****     	   );
 106:lcd.c         **** }
 107:lcd.c         **** 
 108:lcd.c         **** 
 109:lcd.c         **** /************************************************************************* 
 110:lcd.c         **** delay for a minimum of <us> microseconds
 111:lcd.c         **** the number of loops is calculated at compile-time from MCU clock frequency
 112:lcd.c         **** *************************************************************************/
 113:lcd.c         **** #define delay(us)  _delayFourCycles( ( ( 1*(XTAL/4000) )*us)/1000 )
 114:lcd.c         **** 
 115:lcd.c         **** 
 116:lcd.c         **** #if LCD_IO_MODE
 117:lcd.c         **** /* toggle Enable Pin to initiate write */
 118:lcd.c         **** static void toggle_e(void)
 119:lcd.c         **** {
  14               		.loc 1 119 0
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
 120:lcd.c         ****     lcd_e_high();
  20               		.loc 1 120 0
  21 0000 5E9A      		sbi 0xb,6
 121:lcd.c         ****     lcd_e_delay();
  22               		.loc 1 121 0
  23               	/* #APP */
  24               	 ;  121 "lcd.c" 1
  25 0002 00C0      		rjmp 1f
  26               	 1:
  27               	 ;  0 "" 2
 122:lcd.c         ****     lcd_e_low();
  28               		.loc 1 122 0
  29               	/* #NOAPP */
  30 0004 5E98      		cbi 0xb,6
  31 0006 0895      		ret
  32               		.cfi_endproc
  33               	.LFE2:
  36               	lcd_write:
  37               	.LFB3:
 123:lcd.c         **** }
 124:lcd.c         **** #endif
 125:lcd.c         **** 
 126:lcd.c         **** 
 127:lcd.c         **** /*************************************************************************
 128:lcd.c         **** Low-level function to write byte to LCD controller
 129:lcd.c         **** Input:    data   byte to write to LCD
 130:lcd.c         ****           rs     1: write data    
 131:lcd.c         ****                  0: write instruction
 132:lcd.c         **** Returns:  none
 133:lcd.c         **** *************************************************************************/
 134:lcd.c         **** #if LCD_IO_MODE
 135:lcd.c         **** static void lcd_write(uint8_t data,uint8_t rs) 
 136:lcd.c         **** {
  38               		.loc 1 136 0
  39               		.cfi_startproc
  40               	.LVL0:
  41 0008 1F93      		push r17
  42               	.LCFI0:
  43               		.cfi_def_cfa_offset 3
  44               		.cfi_offset 17, -2
  45 000a CF93      		push r28
  46               	.LCFI1:
  47               		.cfi_def_cfa_offset 4
  48               		.cfi_offset 28, -3
  49 000c DF93      		push r29
  50               	.LCFI2:
  51               		.cfi_def_cfa_offset 5
  52               		.cfi_offset 29, -4
  53 000e 1F92      		push __zero_reg__
  54               	.LCFI3:
  55               		.cfi_def_cfa_offset 6
  56 0010 CDB7      		in r28,__SP_L__
  57 0012 DEB7      		in r29,__SP_H__
  58               	.LCFI4:
  59               		.cfi_def_cfa_register 28
  60               	/* prologue: function */
  61               	/* frame size = 1 */
  62               	/* stack size = 4 */
  63               	.L__stack_usage = 4
 137:lcd.c         ****     unsigned char dataBits ;
 138:lcd.c         **** 
 139:lcd.c         **** 
 140:lcd.c         ****     if (rs) {   /* write data        (RS=1, RW=0) */
  64               		.loc 1 140 0
  65 0014 6623      		tst r22
  66 0016 01F0      		breq .L3
 141:lcd.c         ****        lcd_rs_high();
  67               		.loc 1 141 0
  68 0018 5F9A      		sbi 0xb,7
  69 001a 00C0      		rjmp .L4
  70               	.L3:
 142:lcd.c         ****     } else {    /* write instruction (RS=0, RW=0) */
 143:lcd.c         ****        lcd_rs_low();
  71               		.loc 1 143 0
  72 001c 5F98      		cbi 0xb,7
  73               	.L4:
 144:lcd.c         ****     }
 145:lcd.c         ****     lcd_rw_low();
  74               		.loc 1 145 0
  75 001e 5D98      		cbi 0xb,5
 146:lcd.c         **** 
 147:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 148:lcd.c         ****       && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 
 149:lcd.c         ****     {
 150:lcd.c         ****         /* configure data pins as output */
 151:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
  76               		.loc 1 151 0
  77 0020 97B1      		in r25,0x7
  78 0022 9F60      		ori r25,lo8(15)
  79 0024 97B9      		out 0x7,r25
 152:lcd.c         **** 
 153:lcd.c         ****         /* output high nibble first */
 154:lcd.c         ****         dataBits = LCD_DATA0_PORT & 0xF0;
  80               		.loc 1 154 0
  81 0026 18B1      		in r17,0x8
  82 0028 107F      		andi r17,lo8(-16)
  83               	.LVL1:
 155:lcd.c         ****         LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  84               		.loc 1 155 0
  85 002a 982F      		mov r25,r24
  86 002c 9295      		swap r25
  87 002e 9F70      		andi r25,lo8(15)
  88 0030 912B      		or r25,r17
  89 0032 98B9      		out 0x8,r25
 156:lcd.c         ****         lcd_e_toggle();
  90               		.loc 1 156 0
  91 0034 8983      		std Y+1,r24
  92 0036 0E94 0000 		call toggle_e
  93               	.LVL2:
 157:lcd.c         **** 
 158:lcd.c         ****         /* output low nibble */
 159:lcd.c         ****         LCD_DATA0_PORT = dataBits | (data&0x0F);
  94               		.loc 1 159 0
  95 003a 8981      		ldd r24,Y+1
  96 003c 8F70      		andi r24,lo8(15)
  97 003e 812B      		or r24,r17
  98 0040 88B9      		out 0x8,r24
 160:lcd.c         ****         lcd_e_toggle();
  99               		.loc 1 160 0
 100 0042 0E94 0000 		call toggle_e
 101               	.LVL3:
 161:lcd.c         **** 
 162:lcd.c         ****         /* all data pins high (inactive) */
 163:lcd.c         ****         LCD_DATA0_PORT = dataBits | 0x0F;
 102               		.loc 1 163 0
 103 0046 1F60      		ori r17,lo8(15)
 104               	.LVL4:
 105 0048 18B9      		out 0x8,r17
 106               	/* epilogue start */
 164:lcd.c         ****     }
 165:lcd.c         ****     else
 166:lcd.c         ****     {
 167:lcd.c         ****         /* configure data pins as output */
 168:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 169:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 170:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 171:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 172:lcd.c         ****         
 173:lcd.c         ****         /* output high nibble first */
 174:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 175:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 176:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 177:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 178:lcd.c         ****     	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 179:lcd.c         ****     	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 180:lcd.c         ****     	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 181:lcd.c         ****     	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 182:lcd.c         ****         lcd_e_toggle();
 183:lcd.c         ****         
 184:lcd.c         ****         /* output low nibble */
 185:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 186:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 187:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 188:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 189:lcd.c         ****     	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 190:lcd.c         ****     	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 191:lcd.c         ****     	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 192:lcd.c         ****     	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 193:lcd.c         ****         lcd_e_toggle();        
 194:lcd.c         ****         
 195:lcd.c         ****         /* all data pins high (inactive) */
 196:lcd.c         ****         LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 197:lcd.c         ****         LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 198:lcd.c         ****         LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 199:lcd.c         ****         LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 200:lcd.c         ****     }
 201:lcd.c         **** }
 107               		.loc 1 201 0
 108 004a 0F90      		pop __tmp_reg__
 109 004c DF91      		pop r29
 110 004e CF91      		pop r28
 111 0050 1F91      		pop r17
 112 0052 0895      		ret
 113               		.cfi_endproc
 114               	.LFE3:
 117               	lcd_read.constprop.0:
 118               	.LFB17:
 202:lcd.c         **** #else
 203:lcd.c         **** #define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LC
 204:lcd.c         **** /* rs==0 -> write instruction to LCD_IO_FUNCTION */
 205:lcd.c         **** /* rs==1 -> write data to LCD_IO_DATA */
 206:lcd.c         **** #endif
 207:lcd.c         **** 
 208:lcd.c         **** 
 209:lcd.c         **** /*************************************************************************
 210:lcd.c         **** Low-level function to read byte from LCD controller
 211:lcd.c         **** Input:    rs     1: read data    
 212:lcd.c         ****                  0: read busy flag / address counter
 213:lcd.c         **** Returns:  byte read from LCD controller
 214:lcd.c         **** *************************************************************************/
 215:lcd.c         **** #if LCD_IO_MODE
 216:lcd.c         **** static uint8_t lcd_read(uint8_t rs) 
 119               		.loc 1 216 0
 120               		.cfi_startproc
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 125               	.LVL5:
 217:lcd.c         **** {
 218:lcd.c         ****     uint8_t data;
 219:lcd.c         ****     
 220:lcd.c         ****     
 221:lcd.c         ****     if (rs)
 222:lcd.c         ****         lcd_rs_high();                       /* RS=1: read data      */
 223:lcd.c         ****     else
 224:lcd.c         ****         lcd_rs_low();                        /* RS=0: read busy flag */
 126               		.loc 1 224 0
 127 0054 5F98      		cbi 0xb,7
 225:lcd.c         ****     lcd_rw_high();                           /* RW=1  read mode      */
 128               		.loc 1 225 0
 129 0056 5D9A      		sbi 0xb,5
 226:lcd.c         ****     
 227:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 228:lcd.c         ****       && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 229:lcd.c         ****     {
 230:lcd.c         ****         DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 130               		.loc 1 230 0
 131 0058 87B1      		in r24,0x7
 132 005a 807F      		andi r24,lo8(-16)
 133 005c 87B9      		out 0x7,r24
 231:lcd.c         ****         
 232:lcd.c         ****         lcd_e_high();
 134               		.loc 1 232 0
 135 005e 5E9A      		sbi 0xb,6
 233:lcd.c         ****         lcd_e_delay();        
 136               		.loc 1 233 0
 137               	/* #APP */
 138               	 ;  233 "lcd.c" 1
 139 0060 00C0      		rjmp 1f
 140               	 1:
 141               	 ;  0 "" 2
 234:lcd.c         ****         data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 142               		.loc 1 234 0
 143               	/* #NOAPP */
 144 0062 86B1      		in r24,0x6
 145               	.LVL6:
 235:lcd.c         ****         lcd_e_low();
 146               		.loc 1 235 0
 147 0064 5E98      		cbi 0xb,6
 236:lcd.c         ****         
 237:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 148               		.loc 1 237 0
 149               	/* #APP */
 150               	 ;  237 "lcd.c" 1
 151 0066 00C0      		rjmp 1f
 152               	 1:
 153               	 ;  0 "" 2
 238:lcd.c         ****         
 239:lcd.c         ****         lcd_e_high();
 154               		.loc 1 239 0
 155               	/* #NOAPP */
 156 0068 5E9A      		sbi 0xb,6
 240:lcd.c         ****         lcd_e_delay();
 157               		.loc 1 240 0
 158               	/* #APP */
 159               	 ;  240 "lcd.c" 1
 160 006a 00C0      		rjmp 1f
 161               	 1:
 162               	 ;  0 "" 2
 241:lcd.c         ****         data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 163               		.loc 1 241 0
 164               	/* #NOAPP */
 165 006c 96B1      		in r25,0x6
 166 006e 9F70      		andi r25,lo8(15)
 234:lcd.c         ****         lcd_e_low();
 167               		.loc 1 234 0
 168 0070 8295      		swap r24
 169               	.LVL7:
 170 0072 807F      		andi r24,lo8(-16)
 171               	.LVL8:
 242:lcd.c         ****         lcd_e_low();
 172               		.loc 1 242 0
 173 0074 5E98      		cbi 0xb,6
 243:lcd.c         ****     }
 244:lcd.c         ****     else
 245:lcd.c         ****     {
 246:lcd.c         ****         /* configure data pins as input */
 247:lcd.c         ****         DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 248:lcd.c         ****         DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 249:lcd.c         ****         DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 250:lcd.c         ****         DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 251:lcd.c         ****                 
 252:lcd.c         ****         /* read high nibble first */
 253:lcd.c         ****         lcd_e_high();
 254:lcd.c         ****         lcd_e_delay();        
 255:lcd.c         ****         data = 0;
 256:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 257:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 258:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 259:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 260:lcd.c         ****         lcd_e_low();
 261:lcd.c         **** 
 262:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 263:lcd.c         ****     
 264:lcd.c         ****         /* read low nibble */    
 265:lcd.c         ****         lcd_e_high();
 266:lcd.c         ****         lcd_e_delay();
 267:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 268:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 269:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 270:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 271:lcd.c         ****         lcd_e_low();
 272:lcd.c         ****     }
 273:lcd.c         ****     return data;
 274:lcd.c         **** }
 174               		.loc 1 274 0
 175 0076 892B      		or r24,r25
 176               	.LVL9:
 177 0078 0895      		ret
 178               		.cfi_endproc
 179               	.LFE17:
 182               	lcd_waitbusy:
 183               	.LFB5:
 275:lcd.c         **** #else
 276:lcd.c         **** #define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LC
 277:lcd.c         **** /* rs==0 -> read instruction from LCD_IO_FUNCTION */
 278:lcd.c         **** /* rs==1 -> read data from LCD_IO_DATA */
 279:lcd.c         **** #endif
 280:lcd.c         **** 
 281:lcd.c         **** 
 282:lcd.c         **** /*************************************************************************
 283:lcd.c         **** loops while lcd is busy, returns address counter
 284:lcd.c         **** *************************************************************************/
 285:lcd.c         **** static uint8_t lcd_waitbusy(void)
 286:lcd.c         **** 
 287:lcd.c         **** {
 184               		.loc 1 287 0
 185               		.cfi_startproc
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 0 */
 189               	.L__stack_usage = 0
 190               	.L9:
 288:lcd.c         ****     register uint8_t c;
 289:lcd.c         ****     
 290:lcd.c         ****     /* wait until busy flag is cleared */
 291:lcd.c         ****     while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 191               		.loc 1 291 0 discriminator 1
 192 007a 0E94 0000 		call lcd_read.constprop.0
 193               	.LVL10:
 194 007e 87FD      		sbrc r24,7
 195 0080 00C0      		rjmp .L9
 196               	.LVL11:
 197               	.LBB4:
 198               	.LBB5:
 100:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 199               		.loc 1 100 0
 200 0082 84E0      		ldi r24,lo8(4)
 201 0084 90E0      		ldi r25,0
 202               	.LVL12:
 203               	/* #APP */
 204               	 ;  100 "lcd.c" 1
 205 0086 0197      		1: sbiw r24,1
 206 0088 01F4      		brne 1b
 207               	 ;  0 "" 2
 208               	.LVL13:
 209               	/* #NOAPP */
 210               	.LBE5:
 211               	.LBE4:
 292:lcd.c         ****     
 293:lcd.c         ****     /* the address counter is updated 4us after the busy flag is cleared */
 294:lcd.c         ****     delay(2);
 295:lcd.c         **** 
 296:lcd.c         ****     /* now read the address counter */
 297:lcd.c         ****     return (lcd_read(0));  // return address counter
 212               		.loc 1 297 0
 213 008a 0C94 0000 		jmp lcd_read.constprop.0
 214               	.LVL14:
 215               		.cfi_endproc
 216               	.LFE5:
 218               	.global	lcd_command
 220               	lcd_command:
 221               	.LFB7:
 298:lcd.c         ****     
 299:lcd.c         **** }/* lcd_waitbusy */
 300:lcd.c         **** 
 301:lcd.c         **** 
 302:lcd.c         **** /*************************************************************************
 303:lcd.c         **** Move cursor to the start of next line or to the first line if the cursor 
 304:lcd.c         **** is already on the last line.
 305:lcd.c         **** *************************************************************************/
 306:lcd.c         **** static inline void lcd_newline(uint8_t pos)
 307:lcd.c         **** {
 308:lcd.c         ****     register uint8_t addressCounter;
 309:lcd.c         **** 
 310:lcd.c         **** 
 311:lcd.c         **** #if LCD_LINES==1
 312:lcd.c         ****     addressCounter = 0;
 313:lcd.c         **** #endif
 314:lcd.c         **** #if LCD_LINES==2
 315:lcd.c         ****     if ( pos < (LCD_START_LINE2) )
 316:lcd.c         ****         addressCounter = LCD_START_LINE2;
 317:lcd.c         ****     else
 318:lcd.c         ****         addressCounter = LCD_START_LINE1;
 319:lcd.c         **** #endif
 320:lcd.c         **** #if LCD_LINES==4
 321:lcd.c         **** #if KS0073_4LINES_MODE
 322:lcd.c         ****     if ( pos < LCD_START_LINE2 )
 323:lcd.c         ****         addressCounter = LCD_START_LINE2;
 324:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
 325:lcd.c         ****         addressCounter = LCD_START_LINE3;
 326:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
 327:lcd.c         ****         addressCounter = LCD_START_LINE4;
 328:lcd.c         ****     else 
 329:lcd.c         ****         addressCounter = LCD_START_LINE1;
 330:lcd.c         **** #else
 331:lcd.c         ****     if ( pos < LCD_START_LINE3 )
 332:lcd.c         ****         addressCounter = LCD_START_LINE2;
 333:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 334:lcd.c         ****         addressCounter = LCD_START_LINE3;
 335:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 336:lcd.c         ****         addressCounter = LCD_START_LINE4;
 337:lcd.c         ****     else 
 338:lcd.c         ****         addressCounter = LCD_START_LINE1;
 339:lcd.c         **** #endif
 340:lcd.c         **** #endif
 341:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 342:lcd.c         **** 
 343:lcd.c         **** }/* lcd_newline */
 344:lcd.c         **** 
 345:lcd.c         **** 
 346:lcd.c         **** /*
 347:lcd.c         **** ** PUBLIC FUNCTIONS 
 348:lcd.c         **** */
 349:lcd.c         **** 
 350:lcd.c         **** /*************************************************************************
 351:lcd.c         **** Send LCD controller instruction command
 352:lcd.c         **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 353:lcd.c         **** Returns: none
 354:lcd.c         **** *************************************************************************/
 355:lcd.c         **** void lcd_command(uint8_t cmd)
 356:lcd.c         **** {
 222               		.loc 1 356 0
 223               		.cfi_startproc
 224               	.LVL15:
 225 008e CF93      		push r28
 226               	.LCFI5:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 28, -2
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 1 */
 232               	.L__stack_usage = 1
 233 0090 C82F      		mov r28,r24
 357:lcd.c         ****     lcd_waitbusy();
 234               		.loc 1 357 0
 235 0092 0E94 0000 		call lcd_waitbusy
 236               	.LVL16:
 358:lcd.c         ****     lcd_write(cmd,0);
 237               		.loc 1 358 0
 238 0096 60E0      		ldi r22,0
 239 0098 8C2F      		mov r24,r28
 240               	/* epilogue start */
 359:lcd.c         **** }
 241               		.loc 1 359 0
 242 009a CF91      		pop r28
 243               	.LVL17:
 358:lcd.c         ****     lcd_write(cmd,0);
 244               		.loc 1 358 0
 245 009c 0C94 0000 		jmp lcd_write
 246               	.LVL18:
 247               		.cfi_endproc
 248               	.LFE7:
 250               	.global	lcd_data
 252               	lcd_data:
 253               	.LFB8:
 360:lcd.c         **** 
 361:lcd.c         **** 
 362:lcd.c         **** /*************************************************************************
 363:lcd.c         **** Send data byte to LCD controller 
 364:lcd.c         **** Input:   data to send to LCD controller, see HD44780 data sheet
 365:lcd.c         **** Returns: none
 366:lcd.c         **** *************************************************************************/
 367:lcd.c         **** void lcd_data(uint8_t data)
 368:lcd.c         **** {
 254               		.loc 1 368 0
 255               		.cfi_startproc
 256               	.LVL19:
 257 00a0 CF93      		push r28
 258               	.LCFI6:
 259               		.cfi_def_cfa_offset 3
 260               		.cfi_offset 28, -2
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 1 */
 264               	.L__stack_usage = 1
 265 00a2 C82F      		mov r28,r24
 369:lcd.c         ****     lcd_waitbusy();
 266               		.loc 1 369 0
 267 00a4 0E94 0000 		call lcd_waitbusy
 268               	.LVL20:
 370:lcd.c         ****     lcd_write(data,1);
 269               		.loc 1 370 0
 270 00a8 61E0      		ldi r22,lo8(1)
 271 00aa 8C2F      		mov r24,r28
 272               	/* epilogue start */
 371:lcd.c         **** }
 273               		.loc 1 371 0
 274 00ac CF91      		pop r28
 275               	.LVL21:
 370:lcd.c         ****     lcd_write(data,1);
 276               		.loc 1 370 0
 277 00ae 0C94 0000 		jmp lcd_write
 278               	.LVL22:
 279               		.cfi_endproc
 280               	.LFE8:
 282               	.global	lcd_gotoxy
 284               	lcd_gotoxy:
 285               	.LFB9:
 372:lcd.c         **** 
 373:lcd.c         **** 
 374:lcd.c         **** 
 375:lcd.c         **** /*************************************************************************
 376:lcd.c         **** Set cursor to specified position
 377:lcd.c         **** Input:    x  horizontal position  (0: left most position)
 378:lcd.c         ****           y  vertical position    (0: first line)
 379:lcd.c         **** Returns:  none
 380:lcd.c         **** *************************************************************************/
 381:lcd.c         **** void lcd_gotoxy(uint8_t x, uint8_t y)
 382:lcd.c         **** {
 286               		.loc 1 382 0
 287               		.cfi_startproc
 288               	.LVL23:
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 383:lcd.c         **** #if LCD_LINES==1
 384:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 385:lcd.c         **** #endif
 386:lcd.c         **** #if LCD_LINES==2
 387:lcd.c         ****     if ( y==0 ) 
 293               		.loc 1 387 0
 294 00b2 6111      		cpse r22,__zero_reg__
 295 00b4 00C0      		rjmp .L13
 388:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 296               		.loc 1 388 0
 297 00b6 8058      		subi r24,lo8(-(-128))
 298               	.LVL24:
 299 00b8 00C0      		rjmp .L14
 300               	.LVL25:
 301               	.L13:
 389:lcd.c         ****     else
 390:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 302               		.loc 1 390 0
 303 00ba 8054      		subi r24,lo8(-(-64))
 304               	.LVL26:
 305               	.L14:
 306 00bc 0C94 0000 		jmp lcd_command
 307               	.LVL27:
 308               		.cfi_endproc
 309               	.LFE9:
 311               	.global	lcd_getxy
 313               	lcd_getxy:
 314               	.LFB10:
 391:lcd.c         **** #endif
 392:lcd.c         **** #if LCD_LINES==4
 393:lcd.c         ****     if ( y==0 )
 394:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 395:lcd.c         ****     else if ( y==1)
 396:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 397:lcd.c         ****     else if ( y==2)
 398:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 399:lcd.c         ****     else /* y==3 */
 400:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 401:lcd.c         **** #endif
 402:lcd.c         **** 
 403:lcd.c         **** }/* lcd_gotoxy */
 404:lcd.c         **** 
 405:lcd.c         **** 
 406:lcd.c         **** /*************************************************************************
 407:lcd.c         **** *************************************************************************/
 408:lcd.c         **** int lcd_getxy(void)
 409:lcd.c         **** {
 315               		.loc 1 409 0
 316               		.cfi_startproc
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 410:lcd.c         ****     return lcd_waitbusy();
 321               		.loc 1 410 0
 322 00c0 0E94 0000 		call lcd_waitbusy
 323               	.LVL28:
 411:lcd.c         **** }
 324               		.loc 1 411 0
 325 00c4 90E0      		ldi r25,0
 326 00c6 0895      		ret
 327               		.cfi_endproc
 328               	.LFE10:
 330               	.global	lcd_clrscr
 332               	lcd_clrscr:
 333               	.LFB11:
 412:lcd.c         **** 
 413:lcd.c         **** 
 414:lcd.c         **** /*************************************************************************
 415:lcd.c         **** Clear display and set cursor to home position
 416:lcd.c         **** *************************************************************************/
 417:lcd.c         **** void lcd_clrscr(void)
 418:lcd.c         **** {
 334               		.loc 1 418 0
 335               		.cfi_startproc
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 419:lcd.c         ****     lcd_command(1<<LCD_CLR);
 340               		.loc 1 419 0
 341 00c8 81E0      		ldi r24,lo8(1)
 342 00ca 0C94 0000 		jmp lcd_command
 343               	.LVL29:
 344               		.cfi_endproc
 345               	.LFE11:
 347               	.global	lcd_home
 349               	lcd_home:
 350               	.LFB12:
 420:lcd.c         **** }
 421:lcd.c         **** 
 422:lcd.c         **** 
 423:lcd.c         **** /*************************************************************************
 424:lcd.c         **** Set cursor to home position
 425:lcd.c         **** *************************************************************************/
 426:lcd.c         **** void lcd_home(void)
 427:lcd.c         **** {
 351               		.loc 1 427 0
 352               		.cfi_startproc
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
 428:lcd.c         ****     lcd_command(1<<LCD_HOME);
 357               		.loc 1 428 0
 358 00ce 82E0      		ldi r24,lo8(2)
 359 00d0 0C94 0000 		jmp lcd_command
 360               	.LVL30:
 361               		.cfi_endproc
 362               	.LFE12:
 364               	.global	lcd_putc
 366               	lcd_putc:
 367               	.LFB13:
 429:lcd.c         **** }
 430:lcd.c         **** 
 431:lcd.c         **** 
 432:lcd.c         **** /*************************************************************************
 433:lcd.c         **** Display character at current cursor position 
 434:lcd.c         **** Input:    character to be displayed                                       
 435:lcd.c         **** Returns:  none
 436:lcd.c         **** *************************************************************************/
 437:lcd.c         **** void lcd_putc(char c)
 438:lcd.c         **** {
 368               		.loc 1 438 0
 369               		.cfi_startproc
 370               	.LVL31:
 371 00d4 CF93      		push r28
 372               	.LCFI7:
 373               		.cfi_def_cfa_offset 3
 374               		.cfi_offset 28, -2
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 1 */
 378               	.L__stack_usage = 1
 379 00d6 C82F      		mov r28,r24
 439:lcd.c         ****     uint8_t pos;
 440:lcd.c         **** 
 441:lcd.c         **** 
 442:lcd.c         ****     pos = lcd_waitbusy();   // read busy-flag and address counter
 380               		.loc 1 442 0
 381 00d8 0E94 0000 		call lcd_waitbusy
 382               	.LVL32:
 443:lcd.c         ****     if (c=='\n')
 383               		.loc 1 443 0
 384 00dc CA30      		cpi r28,lo8(10)
 385 00de 01F4      		brne .L19
 386               	.LVL33:
 387               	.LBB8:
 388               	.LBB9:
 315:lcd.c         ****         addressCounter = LCD_START_LINE2;
 389               		.loc 1 315 0
 390 00e0 8034      		cpi r24,lo8(64)
 391 00e2 00F4      		brsh .L21
 316:lcd.c         ****     else
 392               		.loc 1 316 0
 393 00e4 80E4      		ldi r24,lo8(64)
 394               	.LVL34:
 395 00e6 00C0      		rjmp .L20
 396               	.LVL35:
 397               	.L21:
 318:lcd.c         **** #endif
 398               		.loc 1 318 0
 399 00e8 80E0      		ldi r24,0
 400               	.LVL36:
 401               	.L20:
 341:lcd.c         **** 
 402               		.loc 1 341 0
 403 00ea 8058      		subi r24,lo8(-(-128))
 404               	.LVL37:
 405               	/* epilogue start */
 406               	.LBE9:
 407               	.LBE8:
 444:lcd.c         ****     {
 445:lcd.c         ****         lcd_newline(pos);
 446:lcd.c         ****     }
 447:lcd.c         ****     else
 448:lcd.c         ****     {
 449:lcd.c         **** #if LCD_WRAP_LINES==1
 450:lcd.c         **** #if LCD_LINES==1
 451:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 452:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 453:lcd.c         ****         }
 454:lcd.c         **** #elif LCD_LINES==2
 455:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 456:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 457:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
 458:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 459:lcd.c         ****         }
 460:lcd.c         **** #elif LCD_LINES==4
 461:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 462:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 463:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 464:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 465:lcd.c         ****         }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 466:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 467:lcd.c         ****         }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 468:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 469:lcd.c         ****         }
 470:lcd.c         **** #endif
 471:lcd.c         ****         lcd_waitbusy();
 472:lcd.c         **** #endif
 473:lcd.c         ****         lcd_write(c, 1);
 474:lcd.c         ****     }
 475:lcd.c         **** 
 476:lcd.c         **** }/* lcd_putc */
 408               		.loc 1 476 0
 409 00ec CF91      		pop r28
 410               	.LVL38:
 411               	.LBB11:
 412               	.LBB10:
 341:lcd.c         **** 
 413               		.loc 1 341 0
 414 00ee 0C94 0000 		jmp lcd_command
 415               	.LVL39:
 416               	.L19:
 417               	.LBE10:
 418               	.LBE11:
 473:lcd.c         ****     }
 419               		.loc 1 473 0
 420 00f2 61E0      		ldi r22,lo8(1)
 421 00f4 8C2F      		mov r24,r28
 422               	.LVL40:
 423               	/* epilogue start */
 424               		.loc 1 476 0
 425 00f6 CF91      		pop r28
 426               	.LVL41:
 473:lcd.c         ****     }
 427               		.loc 1 473 0
 428 00f8 0C94 0000 		jmp lcd_write
 429               	.LVL42:
 430               		.cfi_endproc
 431               	.LFE13:
 433               	.global	lcd_puts
 435               	lcd_puts:
 436               	.LFB14:
 477:lcd.c         **** 
 478:lcd.c         **** 
 479:lcd.c         **** /*************************************************************************
 480:lcd.c         **** Display string without auto linefeed 
 481:lcd.c         **** Input:    string to be displayed
 482:lcd.c         **** Returns:  none
 483:lcd.c         **** *************************************************************************/
 484:lcd.c         **** void lcd_puts(const char *s)
 485:lcd.c         **** /* print string on lcd (no auto linefeed) */
 486:lcd.c         **** {
 437               		.loc 1 486 0
 438               		.cfi_startproc
 439               	.LVL43:
 440 00fc CF93      		push r28
 441               	.LCFI8:
 442               		.cfi_def_cfa_offset 3
 443               		.cfi_offset 28, -2
 444 00fe DF93      		push r29
 445               	.LCFI9:
 446               		.cfi_def_cfa_offset 4
 447               		.cfi_offset 29, -3
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 2 */
 451               	.L__stack_usage = 2
 452 0100 EC01      		movw r28,r24
 453               	.LVL44:
 454               	.L23:
 487:lcd.c         ****     register char c;
 488:lcd.c         **** 
 489:lcd.c         ****     while ( (c = *s++) ) {
 455               		.loc 1 489 0 discriminator 1
 456 0102 8991      		ld r24,Y+
 457               	.LVL45:
 458 0104 8823      		tst r24
 459 0106 01F0      		breq .L25
 490:lcd.c         ****         lcd_putc(c);
 460               		.loc 1 490 0
 461 0108 0E94 0000 		call lcd_putc
 462               	.LVL46:
 463 010c 00C0      		rjmp .L23
 464               	.LVL47:
 465               	.L25:
 466               	/* epilogue start */
 491:lcd.c         ****     }
 492:lcd.c         **** 
 493:lcd.c         **** }/* lcd_puts */
 467               		.loc 1 493 0
 468 010e DF91      		pop r29
 469 0110 CF91      		pop r28
 470               	.LVL48:
 471 0112 0895      		ret
 472               		.cfi_endproc
 473               	.LFE14:
 475               	.global	lcd_puts_p
 477               	lcd_puts_p:
 478               	.LFB15:
 494:lcd.c         **** 
 495:lcd.c         **** 
 496:lcd.c         **** /*************************************************************************
 497:lcd.c         **** Display string from program memory without auto linefeed 
 498:lcd.c         **** Input:     string from program memory be be displayed                                        
 499:lcd.c         **** Returns:   none
 500:lcd.c         **** *************************************************************************/
 501:lcd.c         **** void lcd_puts_p(const char *progmem_s)
 502:lcd.c         **** /* print string from program memory on lcd (no auto linefeed) */
 503:lcd.c         **** {
 479               		.loc 1 503 0
 480               		.cfi_startproc
 481               	.LVL49:
 482 0114 CF93      		push r28
 483               	.LCFI10:
 484               		.cfi_def_cfa_offset 3
 485               		.cfi_offset 28, -2
 486 0116 DF93      		push r29
 487               	.LCFI11:
 488               		.cfi_def_cfa_offset 4
 489               		.cfi_offset 29, -3
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 492               	/* stack size = 2 */
 493               	.L__stack_usage = 2
 494 0118 FC01      		movw r30,r24
 495               	.LVL50:
 496               	.L27:
 497               	.LBB12:
 504:lcd.c         ****     register char c;
 505:lcd.c         **** 
 506:lcd.c         ****     while ( (c = pgm_read_byte(progmem_s++)) ) {
 498               		.loc 1 506 0 discriminator 1
 499               	/* #APP */
 500               	 ;  506 "lcd.c" 1
 501 011a 8491      		lpm r24, Z
 502               		
 503               	 ;  0 "" 2
 504               	.LVL51:
 505               	/* #NOAPP */
 506 011c EF01      		movw r28,r30
 507 011e 2196      		adiw r28,1
 508               	.LVL52:
 509               	.LBE12:
 510 0120 8823      		tst r24
 511 0122 01F0      		breq .L29
 507:lcd.c         ****         lcd_putc(c);
 512               		.loc 1 507 0
 513 0124 0E94 0000 		call lcd_putc
 514               	.LVL53:
 515 0128 FE01      		movw r30,r28
 516 012a 00C0      		rjmp .L27
 517               	.LVL54:
 518               	.L29:
 519               	/* epilogue start */
 508:lcd.c         ****     }
 509:lcd.c         **** 
 510:lcd.c         **** }/* lcd_puts_p */
 520               		.loc 1 510 0
 521 012c DF91      		pop r29
 522 012e CF91      		pop r28
 523               	.LVL55:
 524 0130 0895      		ret
 525               		.cfi_endproc
 526               	.LFE15:
 528               	.global	lcd_init
 530               	lcd_init:
 531               	.LFB16:
 511:lcd.c         **** 
 512:lcd.c         **** 
 513:lcd.c         **** /*************************************************************************
 514:lcd.c         **** Initialize display and select type of cursor 
 515:lcd.c         **** Input:    dispAttr LCD_DISP_OFF            display off
 516:lcd.c         ****                    LCD_DISP_ON             display on, cursor off
 517:lcd.c         ****                    LCD_DISP_ON_CURSOR      display on, cursor on
 518:lcd.c         ****                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
 519:lcd.c         **** Returns:  none
 520:lcd.c         **** *************************************************************************/
 521:lcd.c         **** void lcd_init(uint8_t dispAttr)
 522:lcd.c         **** {
 532               		.loc 1 522 0
 533               		.cfi_startproc
 534               	.LVL56:
 535 0132 CF93      		push r28
 536               	.LCFI12:
 537               		.cfi_def_cfa_offset 3
 538               		.cfi_offset 28, -2
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 1 */
 542               	.L__stack_usage = 1
 543 0134 C82F      		mov r28,r24
 523:lcd.c         **** #if LCD_IO_MODE
 524:lcd.c         ****     /*
 525:lcd.c         ****      *  Initialize LCD to 4 bit I/O mode
 526:lcd.c         ****      */
 527:lcd.c         ****      
 528:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 529:lcd.c         ****       && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT =
 530:lcd.c         ****       && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 531:lcd.c         ****       && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
 532:lcd.c         ****     {
 533:lcd.c         ****         /* configure all port bits as output (all LCD lines on same port) */
 534:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x7F;
 535:lcd.c         ****     }
 536:lcd.c         ****     else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( 
 537:lcd.c         ****            && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_P
 538:lcd.c         ****     {
 539:lcd.c         ****         /* configure all port bits as output (all LCD data lines on same port, but control lines on
 540:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
 544               		.loc 1 540 0
 545 0136 97B1      		in r25,0x7
 546 0138 9F60      		ori r25,lo8(15)
 547 013a 97B9      		out 0x7,r25
 541:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 548               		.loc 1 541 0
 549 013c 579A      		sbi 0xa,7
 542:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 550               		.loc 1 542 0
 551 013e 559A      		sbi 0xa,5
 543:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 552               		.loc 1 543 0
 553 0140 569A      		sbi 0xa,6
 554               	.LVL57:
 555               	.LBB23:
 556               	.LBB24:
 100:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 557               		.loc 1 100 0
 558 0142 E0E0      		ldi r30,0
 559 0144 FDE7      		ldi r31,lo8(125)
 560               	/* #APP */
 561               	 ;  100 "lcd.c" 1
 562 0146 3197      		1: sbiw r30,1
 563 0148 01F4      		brne 1b
 564               	 ;  0 "" 2
 565               	.LVL58:
 566               	/* #NOAPP */
 567               	.LBE24:
 568               	.LBE23:
 544:lcd.c         ****     }
 545:lcd.c         ****     else
 546:lcd.c         ****     {
 547:lcd.c         ****         /* configure all port bits as output (LCD data and control lines on different ports */
 548:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 549:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 550:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 551:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 552:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 553:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 554:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 555:lcd.c         ****     }
 556:lcd.c         ****     delay(16000);        /* wait 16ms or more after power-on       */
 557:lcd.c         ****     
 558:lcd.c         ****     /* initial write to lcd is 8bit */
 559:lcd.c         ****     LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 569               		.loc 1 559 0
 570 014a 419A      		sbi 0x8,1
 560:lcd.c         ****     LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 571               		.loc 1 560 0
 572 014c 409A      		sbi 0x8,0
 561:lcd.c         ****     lcd_e_toggle();
 573               		.loc 1 561 0
 574 014e 0E94 0000 		call toggle_e
 575               	.LVL59:
 576               	.LBB25:
 577               	.LBB26:
 100:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 578               		.loc 1 100 0
 579 0152 E0E0      		ldi r30,0
 580 0154 F7E2      		ldi r31,lo8(39)
 581               	/* #APP */
 582               	 ;  100 "lcd.c" 1
 583 0156 3197      		1: sbiw r30,1
 584 0158 01F4      		brne 1b
 585               	 ;  0 "" 2
 586               	.LVL60:
 587               	/* #NOAPP */
 588               	.LBE26:
 589               	.LBE25:
 562:lcd.c         ****     delay(4992);         /* delay, busy flag can't be checked here */
 563:lcd.c         ****    
 564:lcd.c         ****     /* repeat last command */ 
 565:lcd.c         ****     lcd_e_toggle();      
 590               		.loc 1 565 0
 591 015a 0E94 0000 		call toggle_e
 592               	.LVL61:
 593               	.LBB27:
 594               	.LBB28:
 100:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 595               		.loc 1 100 0
 596 015e E0E8      		ldi r30,lo8(-128)
 597 0160 F0E0      		ldi r31,0
 598               	/* #APP */
 599               	 ;  100 "lcd.c" 1
 600 0162 3197      		1: sbiw r30,1
 601 0164 01F4      		brne 1b
 602               	 ;  0 "" 2
 603               	.LVL62:
 604               	/* #NOAPP */
 605               	.LBE28:
 606               	.LBE27:
 566:lcd.c         ****     delay(64);           /* delay, busy flag can't be checked here */
 567:lcd.c         ****     
 568:lcd.c         ****     /* repeat last command a third time */
 569:lcd.c         ****     lcd_e_toggle();      
 607               		.loc 1 569 0
 608 0166 0E94 0000 		call toggle_e
 609               	.LVL63:
 610               	.LBB29:
 611               	.LBB30:
 100:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 612               		.loc 1 100 0
 613 016a E0E8      		ldi r30,lo8(-128)
 614 016c F0E0      		ldi r31,0
 615               	/* #APP */
 616               	 ;  100 "lcd.c" 1
 617 016e 3197      		1: sbiw r30,1
 618 0170 01F4      		brne 1b
 619               	 ;  0 "" 2
 620               	.LVL64:
 621               	/* #NOAPP */
 622               	.LBE30:
 623               	.LBE29:
 570:lcd.c         ****     delay(64);           /* delay, busy flag can't be checked here */
 571:lcd.c         **** 
 572:lcd.c         ****     /* now configure for 4bit mode */
 573:lcd.c         ****     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 624               		.loc 1 573 0
 625 0172 4098      		cbi 0x8,0
 574:lcd.c         ****     lcd_e_toggle();
 626               		.loc 1 574 0
 627 0174 0E94 0000 		call toggle_e
 628               	.LVL65:
 629               	.LBB31:
 630               	.LBB32:
 100:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 631               		.loc 1 100 0
 632 0178 E0E8      		ldi r30,lo8(-128)
 633 017a F0E0      		ldi r31,0
 634               	/* #APP */
 635               	 ;  100 "lcd.c" 1
 636 017c 3197      		1: sbiw r30,1
 637 017e 01F4      		brne 1b
 638               	 ;  0 "" 2
 639               	.LVL66:
 640               	/* #NOAPP */
 641               	.LBE32:
 642               	.LBE31:
 575:lcd.c         ****     delay(64);           /* some displays need this additional delay */
 576:lcd.c         ****     
 577:lcd.c         ****     /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
 578:lcd.c         **** #else
 579:lcd.c         ****     /*
 580:lcd.c         ****      * Initialize LCD to 8 bit memory mapped mode
 581:lcd.c         ****      */
 582:lcd.c         ****     
 583:lcd.c         ****     /* enable external SRAM (memory mapped lcd) and one wait state */        
 584:lcd.c         ****     MCUCR = _BV(SRE) | _BV(SRW);
 585:lcd.c         **** 
 586:lcd.c         ****     /* reset LCD */
 587:lcd.c         ****     delay(16000);                           /* wait 16ms after power-on     */
 588:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
 589:lcd.c         ****     delay(4992);                            /* wait 5ms                     */
 590:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
 591:lcd.c         ****     delay(64);                              /* wait 64us                    */
 592:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
 593:lcd.c         ****     delay(64);                              /* wait 64us                    */
 594:lcd.c         **** #endif
 595:lcd.c         **** 
 596:lcd.c         **** #if KS0073_4LINES_MODE
 597:lcd.c         ****     /* Display with KS0073 controller requires special commands for enabling 4 line mode */
 598:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
 599:lcd.c         **** 	lcd_command(KS0073_4LINES_MODE);
 600:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
 601:lcd.c         **** #else
 602:lcd.c         ****     lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 643               		.loc 1 602 0
 644 0180 88E2      		ldi r24,lo8(40)
 645 0182 0E94 0000 		call lcd_command
 646               	.LVL67:
 603:lcd.c         **** #endif
 604:lcd.c         ****     lcd_command(LCD_DISP_OFF);              /* display off                  */
 647               		.loc 1 604 0
 648 0186 88E0      		ldi r24,lo8(8)
 649 0188 0E94 0000 		call lcd_command
 650               	.LVL68:
 605:lcd.c         ****     lcd_clrscr();                           /* display clear                */ 
 651               		.loc 1 605 0
 652 018c 0E94 0000 		call lcd_clrscr
 653               	.LVL69:
 606:lcd.c         ****     lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 654               		.loc 1 606 0
 655 0190 86E0      		ldi r24,lo8(6)
 656 0192 0E94 0000 		call lcd_command
 657               	.LVL70:
 607:lcd.c         ****     lcd_command(dispAttr);                  /* display/cursor control       */
 658               		.loc 1 607 0
 659 0196 8C2F      		mov r24,r28
 660               	/* epilogue start */
 608:lcd.c         **** 
 609:lcd.c         **** }/* lcd_init */
 661               		.loc 1 609 0
 662 0198 CF91      		pop r28
 663               	.LVL71:
 607:lcd.c         ****     lcd_command(dispAttr);                  /* display/cursor control       */
 664               		.loc 1 607 0
 665 019a 0C94 0000 		jmp lcd_command
 666               	.LVL72:
 667               		.cfi_endproc
 668               	.LFE16:
 670               	.Letext0:
 671               		.file 2 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.1056\\avr8-gnu-too
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:2      *ABS*:0000003e __SP_H__
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:3      *ABS*:0000003d __SP_L__
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:4      *ABS*:0000003f __SREG__
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:6      *ABS*:00000001 __zero_reg__
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:11     .text:00000000 toggle_e
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:36     .text:00000008 lcd_write
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:117    .text:00000054 lcd_read.constprop.0
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:182    .text:0000007a lcd_waitbusy
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:220    .text:0000008e lcd_command
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:252    .text:000000a0 lcd_data
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:284    .text:000000b2 lcd_gotoxy
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:313    .text:000000c0 lcd_getxy
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:332    .text:000000c8 lcd_clrscr
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:349    .text:000000ce lcd_home
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:366    .text:000000d4 lcd_putc
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:435    .text:000000fc lcd_puts
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:477    .text:00000114 lcd_puts_p
C:\Users\roney\AppData\Local\Temp\ccnTEfjg.s:530    .text:00000132 lcd_init

NO UNDEFINED SYMBOLS
