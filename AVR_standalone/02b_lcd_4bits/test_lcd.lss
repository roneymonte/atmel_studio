
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000004a2  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cb8  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004b1  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000346  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000018c  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002bc  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005f0  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	4c 69       	ori	r20, 0x9C	; 156
  6a:	6e 65       	ori	r22, 0x5E	; 94
  6c:	20 32       	cpi	r18, 0x20	; 32
  6e:	20 6c       	ori	r18, 0xC0	; 192
  70:	6f 6e       	ori	r22, 0xEF	; 239
  72:	67 65       	ori	r22, 0x57	; 87
  74:	72 20       	and	r7, r2
  76:	74 68       	ori	r23, 0x84	; 132
  78:	61 6e       	ori	r22, 0xE1	; 225
  7a:	20 31       	cpi	r18, 0x10	; 16
  7c:	34 20       	and	r3, r4
  7e:	63 68       	ori	r22, 0x83	; 131
  80:	61 72       	andi	r22, 0x21	; 33
  82:	61 63       	ori	r22, 0x31	; 49
  84:	74 65       	ori	r23, 0x54	; 84
  86:	72 73       	andi	r23, 0x32	; 50
	...

00000089 <__c.1940>:
  89:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  99:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  a9:	0a 00                                               ..

000000ab <copyRightChar>:
  ab:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................
	...

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d4 e0       	ldi	r29, 0x04	; 4
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e2 ea       	ldi	r30, 0xA2	; 162
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>
  de:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  e2:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <wait_until_key_pressed>:
{
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PIND;                  // read input
  ea:	89 b1       	in	r24, 0x09	; 9
        for(i=0;i<65535;i++);
        temp2 = PIND;                  // read input
  ec:	99 b1       	in	r25, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
  ee:	89 23       	and	r24, r25
    } while ( temp1 & _BV(PIND2) );
  f0:	82 fd       	sbrc	r24, 2
  f2:	fb cf       	rjmp	.-10     	; 0xea <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
  f4:	4a 9b       	sbis	0x09, 2	; 9
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <wait_until_key_pressed+0xa>
}
  f8:	08 95       	ret

000000fa <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  fa:	5e 9a       	sbi	0x0b, 6	; 11
    lcd_e_delay();
  fc:	00 c0       	rjmp	.+0      	; 0xfe <toggle_e+0x4>
    lcd_e_low();
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	08 95       	ret

00000102 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 10e:	66 23       	and	r22, r22
 110:	11 f0       	breq	.+4      	; 0x116 <lcd_write+0x14>
       lcd_rs_high();
 112:	5f 9a       	sbi	0x0b, 7	; 11
 114:	01 c0       	rjmp	.+2      	; 0x118 <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 116:	5f 98       	cbi	0x0b, 7	; 11
    }
    lcd_rw_low();
 118:	5d 98       	cbi	0x0b, 5	; 11

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 11a:	97 b1       	in	r25, 0x07	; 7
 11c:	9f 60       	ori	r25, 0x0F	; 15
 11e:	97 b9       	out	0x07, r25	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 120:	18 b1       	in	r17, 0x08	; 8
 122:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 124:	98 2f       	mov	r25, r24
 126:	92 95       	swap	r25
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	91 2b       	or	r25, r17
 12c:	98 b9       	out	0x08, r25	; 8
        lcd_e_toggle();
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	81 2b       	or	r24, r17
 13a:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 13c:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 140:	1f 60       	ori	r17, 0x0F	; 15
 142:	18 b9       	out	0x08, r17	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 14e:	5f 98       	cbi	0x0b, 7	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 150:	5d 9a       	sbi	0x0b, 5	; 11
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 152:	87 b1       	in	r24, 0x07	; 7
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 158:	5e 9a       	sbi	0x0b, 6	; 11
        lcd_e_delay();        
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_read.constprop.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 15c:	86 b1       	in	r24, 0x06	; 6
        lcd_e_low();
 15e:	5e 98       	cbi	0x0b, 6	; 11
        
        lcd_e_delay();                       /* Enable 500ns low       */
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_read.constprop.0+0x14>
        
        lcd_e_high();
 162:	5e 9a       	sbi	0x0b, 6	; 11
        lcd_e_delay();
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_read.constprop.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 166:	96 b1       	in	r25, 0x06	; 6
 168:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 16a:	82 95       	swap	r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
 16e:	5e 98       	cbi	0x0b, 6	; 11
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 170:	89 2b       	or	r24, r25
 172:	08 95       	ret

00000174 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 174:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_read.constprop.0>
 178:	87 fd       	sbrc	r24, 7
 17a:	fc cf       	rjmp	.-8      	; 0x174 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 184:	0c 94 a7 00 	jmp	0x14e	; 0x14e <lcd_read.constprop.0>

00000188 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 18c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
    lcd_write(cmd,0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	8c 2f       	mov	r24, r28
}
 194:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 196:	0c 94 81 00 	jmp	0x102	; 0x102 <lcd_write>

0000019a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 19e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
    lcd_write(data,1);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	8c 2f       	mov	r24, r28
}
 1a6:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 1a8:	0c 94 81 00 	jmp	0x102	; 0x102 <lcd_write>

000001ac <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 1ac:	61 11       	cpse	r22, r1
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1b0:	80 58       	subi	r24, 0x80	; 128
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1b4:	80 54       	subi	r24, 0x40	; 64
 1b6:	0c 94 c4 00 	jmp	0x188	; 0x188 <lcd_command>

000001ba <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 1ba:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
}
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0c 94 c4 00 	jmp	0x188	; 0x188 <lcd_command>

000001c8 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0c 94 c4 00 	jmp	0x188	; 0x188 <lcd_command>

000001ce <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1d2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_waitbusy>
    if (c=='\n')
 1d6:	ca 30       	cpi	r28, 0x0A	; 10
 1d8:	49 f4       	brne	.+18     	; 0x1ec <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1da:	80 34       	cpi	r24, 0x40	; 64
 1dc:	10 f4       	brcc	.+4      	; 0x1e2 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 1de:	80 e4       	ldi	r24, 0x40	; 64
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1e4:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 1e6:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1e8:	0c 94 c4 00 	jmp	0x188	; 0x188 <lcd_command>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 1f0:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1f2:	0c 94 81 00 	jmp	0x102	; 0x102 <lcd_write>

000001f6 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 1fc:	89 91       	ld	r24, Y+
 1fe:	88 23       	and	r24, r24
 200:	19 f0       	breq	.+6      	; 0x208 <lcd_puts+0x12>
        lcd_putc(c);
 202:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
 206:	fa cf       	rjmp	.-12     	; 0x1fc <lcd_puts+0x6>
    }

}/* lcd_puts */
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 214:	84 91       	lpm	r24, Z
 216:	ef 01       	movw	r28, r30
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	88 23       	and	r24, r24
 21c:	21 f0       	breq	.+8      	; 0x226 <lcd_puts_p+0x18>
        lcd_putc(c);
 21e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
 222:	fe 01       	movw	r30, r28
 224:	f7 cf       	rjmp	.-18     	; 0x214 <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 22c:	cf 93       	push	r28
 22e:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 230:	97 b1       	in	r25, 0x07	; 7
 232:	9f 60       	ori	r25, 0x0F	; 15
 234:	97 b9       	out	0x07, r25	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 236:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 238:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 23a:	56 9a       	sbi	0x0a, 6	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23c:	e0 e0       	ldi	r30, 0x00	; 0
 23e:	fd e7       	ldi	r31, 0x7D	; 125
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 244:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 246:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 248:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	f7 e2       	ldi	r31, 0x27	; 39
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x24>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 254:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 258:	e0 e8       	ldi	r30, 0x80	; 128
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 260:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 264:	e0 e8       	ldi	r30, 0x80	; 128
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 26c:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 26e:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 272:	e0 e8       	ldi	r30, 0x80	; 128
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 286:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 290:	8c 2f       	mov	r24, r28

}/* lcd_init */
 292:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 294:	0c 94 c4 00 	jmp	0x188	; 0x188 <lcd_command>

00000298 <main>:


int main(void)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	27 97       	sbiw	r28, 0x07	; 7
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
 2ac:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 2ae:	5a 9a       	sbi	0x0b, 2	; 11
    DDRB |= (1 << PB0);		/* Led na porta PB0 para sinalizacao */
 2b0:	20 9a       	sbi	0x04, 0	; 4

    //-----------------
    DDRD |= (1 << PD5);
 2b2:	55 9a       	sbi	0x0a, 5	; 10
    DDRD |= (1 << PD6);
 2b4:	56 9a       	sbi	0x0a, 6	; 10
    DDRD |= (1 << PD7);
 2b6:	57 9a       	sbi	0x0a, 7	; 10
    PORTD &= ~((1<<PD5)|(1<<PD6)|(1<<PD7));
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	8f 71       	andi	r24, 0x1F	; 31
 2bc:	8b b9       	out	0x0b, r24	; 11
    //-----------------
    DDRC |= (1 << PC0);
 2be:	38 9a       	sbi	0x07, 0	; 7
    DDRC |= (1 << PC1);
 2c0:	39 9a       	sbi	0x07, 1	; 7
    DDRC |= (1 << PC2);
 2c2:	3a 9a       	sbi	0x07, 2	; 7
    DDRC |= (1 << PC3);
 2c4:	3b 9a       	sbi	0x07, 3	; 7

	PORTB=0b1; _delay_ms(1000);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	2f e3       	ldi	r18, 0x3F	; 63
 2cc:	8d e0       	ldi	r24, 0x0D	; 13
 2ce:	93 e0       	ldi	r25, 0x03	; 3
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x38>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x42>
 2da:	00 00       	nop
	PORTB=0b0; _delay_ms(1000);
 2dc:	15 b8       	out	0x05, r1	; 5
 2de:	ef e3       	ldi	r30, 0x3F	; 63
 2e0:	fd e0       	ldi	r31, 0x0D	; 13
 2e2:	23 e0       	ldi	r18, 0x03	; 3
 2e4:	e1 50       	subi	r30, 0x01	; 1
 2e6:	f0 40       	sbci	r31, 0x00	; 0
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x4c>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x56>
 2ee:	00 00       	nop
	PORTB=0b1; _delay_ms(1000);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	8f e3       	ldi	r24, 0x3F	; 63
 2f6:	9d e0       	ldi	r25, 0x0D	; 13
 2f8:	e3 e0       	ldi	r30, 0x03	; 3
 2fa:	81 50       	subi	r24, 0x01	; 1
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e0 40       	sbci	r30, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x62>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x6c>
 304:	00 00       	nop
	PORTB=0b0; _delay_ms(1000);
 306:	15 b8       	out	0x05, r1	; 5
 308:	ff e3       	ldi	r31, 0x3F	; 63
 30a:	2d e0       	ldi	r18, 0x0D	; 13
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	f1 50       	subi	r31, 0x01	; 1
 310:	20 40       	sbci	r18, 0x00	; 0
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x76>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x80>
 318:	00 00       	nop
	PORTB=0b1; _delay_ms(1000);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	85 b9       	out	0x05, r24	; 5
 31e:	9f e3       	ldi	r25, 0x3F	; 63
 320:	ed e0       	ldi	r30, 0x0D	; 13
 322:	f3 e0       	ldi	r31, 0x03	; 3
 324:	91 50       	subi	r25, 0x01	; 1
 326:	e0 40       	sbci	r30, 0x00	; 0
 328:	f0 40       	sbci	r31, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x8c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x96>
 32e:	00 00       	nop
	PORTB=0b0; _delay_ms(1000);
 330:	15 b8       	out	0x05, r1	; 5
 332:	2f e3       	ldi	r18, 0x3F	; 63
 334:	8d e0       	ldi	r24, 0x0D	; 13
 336:	93 e0       	ldi	r25, 0x03	; 3
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0xa0>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xaa>
 342:	00 00       	nop

    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_init>
	PORTB=0b1; _delay_ms(1000);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	ef e3       	ldi	r30, 0x3F	; 63
 350:	fd e0       	ldi	r31, 0x0D	; 13
 352:	23 e0       	ldi	r18, 0x03	; 3
 354:	e1 50       	subi	r30, 0x01	; 1
 356:	f0 40       	sbci	r31, 0x00	; 0
 358:	20 40       	sbci	r18, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0xbc>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0xc6>
 35e:	00 00       	nop
	PORTB=0b0; _delay_ms(1000);
 360:	15 b8       	out	0x05, r1	; 5
 362:	8f e3       	ldi	r24, 0x3F	; 63
 364:	9d e0       	ldi	r25, 0x0D	; 13
 366:	e3 e0       	ldi	r30, 0x03	; 3
 368:	81 50       	subi	r24, 0x01	; 1
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e0 40       	sbci	r30, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0xd0>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0xda>
 372:	00 00       	nop
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 374:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
 380:	81 e1       	ldi	r24, 0x11	; 17
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	87 e0       	ldi	r24, 0x07	; 7
 38c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 390:	8a e3       	ldi	r24, 0x3A	; 58
 392:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 396:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 39a:	8e e0       	ldi	r24, 0x0E	; 14
 39c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 3a0:	88 e1       	ldi	r24, 0x18	; 24
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 3a8:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 3ac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 3b0:	89 e8       	ldi	r24, 0x89	; 137
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 3b8:	88 e6       	ldi	r24, 0x68	; 104
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 3c0:	88 e1       	ldi	r24, 0x18	; 24
 3c2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 3c6:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 3ca:	8c e0       	ldi	r24, 0x0C	; 12
 3cc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 3d0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d4:	4a e0       	ldi	r20, 0x0A	; 10
 3d6:	be 01       	movw	r22, r28
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	86 e8       	ldi	r24, 0x86	; 134
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
        
        /* put converted string to display */
        lcd_puts(buffer);
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 3ec:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 3f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 3f4:	8e e1       	ldi	r24, 0x1E	; 30
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 3fc:	80 e4       	ldi	r24, 0x40	; 64
 3fe:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_command>
 402:	0b ea       	ldi	r16, 0xAB	; 171
 404:	10 e0       	ldi	r17, 0x00	; 0
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 406:	f8 01       	movw	r30, r16
 408:	84 91       	lpm	r24, Z
 40a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_data>
 40e:	0f 5f       	subi	r16, 0xFF	; 255
 410:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	0b 3b       	cpi	r16, 0xBB	; 187
 416:	1f 07       	cpc	r17, r31
 418:	b1 f7       	brne	.-20     	; 0x406 <main+0x16e>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
       lcd_putc(1);
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 42e:	0e 94 75 00 	call	0xea	; 0xea <wait_until_key_pressed>
              
    }
 432:	a0 cf       	rjmp	.-192    	; 0x374 <main+0xdc>

00000434 <__itoa_ncheck>:
 434:	bb 27       	eor	r27, r27
 436:	4a 30       	cpi	r20, 0x0A	; 10
 438:	31 f4       	brne	.+12     	; 0x446 <__itoa_ncheck+0x12>
 43a:	99 23       	and	r25, r25
 43c:	22 f4       	brpl	.+8      	; 0x446 <__itoa_ncheck+0x12>
 43e:	bd e2       	ldi	r27, 0x2D	; 45
 440:	90 95       	com	r25
 442:	81 95       	neg	r24
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	0c 94 26 02 	jmp	0x44c	; 0x44c <__utoa_common>

0000044a <__utoa_ncheck>:
 44a:	bb 27       	eor	r27, r27

0000044c <__utoa_common>:
 44c:	fb 01       	movw	r30, r22
 44e:	55 27       	eor	r21, r21
 450:	aa 27       	eor	r26, r26
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	aa 1f       	adc	r26, r26
 458:	a4 17       	cp	r26, r20
 45a:	10 f0       	brcs	.+4      	; 0x460 <__utoa_common+0x14>
 45c:	a4 1b       	sub	r26, r20
 45e:	83 95       	inc	r24
 460:	50 51       	subi	r21, 0x10	; 16
 462:	b9 f7       	brne	.-18     	; 0x452 <__utoa_common+0x6>
 464:	a0 5d       	subi	r26, 0xD0	; 208
 466:	aa 33       	cpi	r26, 0x3A	; 58
 468:	08 f0       	brcs	.+2      	; 0x46c <__utoa_common+0x20>
 46a:	a9 5d       	subi	r26, 0xD9	; 217
 46c:	a1 93       	st	Z+, r26
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	79 f7       	brne	.-34     	; 0x450 <__utoa_common+0x4>
 472:	b1 11       	cpse	r27, r1
 474:	b1 93       	st	Z+, r27
 476:	11 92       	st	Z+, r1
 478:	cb 01       	movw	r24, r22
 47a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <strrev>

0000047e <strrev>:
 47e:	dc 01       	movw	r26, r24
 480:	fc 01       	movw	r30, r24
 482:	67 2f       	mov	r22, r23
 484:	71 91       	ld	r23, Z+
 486:	77 23       	and	r23, r23
 488:	e1 f7       	brne	.-8      	; 0x482 <strrev+0x4>
 48a:	32 97       	sbiw	r30, 0x02	; 2
 48c:	04 c0       	rjmp	.+8      	; 0x496 <strrev+0x18>
 48e:	7c 91       	ld	r23, X
 490:	6d 93       	st	X+, r22
 492:	70 83       	st	Z, r23
 494:	62 91       	ld	r22, -Z
 496:	ae 17       	cp	r26, r30
 498:	bf 07       	cpc	r27, r31
 49a:	c8 f3       	brcs	.-14     	; 0x48e <strrev+0x10>
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
